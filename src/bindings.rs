/* automatically generated by rust-bindgen 0.69.5 */
#[allow(clippy::approx_constant)]

pub const CL_TARGET_OPENCL_VERSION: u32 = 300;
pub const CL_VERSION_3_0: u32 = 1;
pub const CL_VERSION_2_2: u32 = 1;
pub const CL_VERSION_2_1: u32 = 1;
pub const CL_VERSION_2_0: u32 = 1;
pub const CL_VERSION_1_2: u32 = 1;
pub const CL_VERSION_1_1: u32 = 1;
pub const CL_VERSION_1_0: u32 = 1;
pub const CL_CHAR_BIT: u32 = 8;
pub const CL_SCHAR_MAX: u32 = 127;
pub const CL_SCHAR_MIN: i32 = -128;
pub const CL_CHAR_MAX: u32 = 127;
pub const CL_CHAR_MIN: i32 = -128;
pub const CL_UCHAR_MAX: u32 = 255;
pub const CL_SHRT_MAX: u32 = 32767;
pub const CL_SHRT_MIN: i32 = -32768;
pub const CL_USHRT_MAX: u32 = 65535;
pub const CL_INT_MAX: u32 = 2147483647;
pub const CL_INT_MIN: i32 = -2147483648;
pub const CL_UINT_MAX: u32 = 4294967295;
pub const CL_FLT_DIG: u32 = 6;
pub const CL_FLT_MANT_DIG: u32 = 24;
pub const CL_FLT_MAX_10_EXP: u32 = 38;
pub const CL_FLT_MAX_EXP: u32 = 128;
pub const CL_FLT_MIN_10_EXP: i32 = -37;
pub const CL_FLT_MIN_EXP: i32 = -125;
pub const CL_FLT_RADIX: u32 = 2;
pub const CL_FLT_MAX: f64 = 340282346638528860000000000000000000000.0;
pub const CL_HALF_DIG: u32 = 3;
pub const CL_HALF_MANT_DIG: u32 = 11;
pub const CL_HALF_MAX_10_EXP: u32 = 4;
pub const CL_HALF_MAX_EXP: u32 = 16;
pub const CL_HALF_MIN_10_EXP: i32 = -4;
pub const CL_HALF_MIN_EXP: i32 = -13;
pub const CL_HALF_RADIX: u32 = 2;
pub const CL_HALF_MAX: f64 = 65504.0;
pub const CL_DBL_DIG: u32 = 15;
pub const CL_DBL_MANT_DIG: u32 = 53;
pub const CL_DBL_MAX_10_EXP: u32 = 308;
pub const CL_DBL_MAX_EXP: u32 = 1024;
pub const CL_DBL_MIN_10_EXP: i32 = -307;
pub const CL_DBL_MIN_EXP: i32 = -1021;
pub const CL_DBL_RADIX: u32 = 2;
pub const CL_M_E: f64 = 2.718281828459045;
pub const CL_M_LOG2E: f64 = 1.4426950408889634;
pub const CL_M_LOG10E: f64 = 0.4342944819032518;
pub const CL_M_LN2: f64 = 0.6931471805599453;
pub const CL_M_LN10: f64 = 2.302585092994046;
pub const CL_M_PI: f64 = 3.141592653589793;
pub const CL_M_PI_2: f64 = 1.5707963267948966;
pub const CL_M_PI_4: f64 = 0.7853981633974483;
pub const CL_M_1_PI: f64 = 0.3183098861837907;
pub const CL_M_2_PI: f64 = 0.6366197723675814;
pub const CL_M_2_SQRTPI: f64 = 1.1283791670955126;
pub const CL_M_SQRT2: f64 = 1.4142135623730951;
pub const CL_M_SQRT1_2: f64 = 0.7071067811865476;
pub const CL_M_E_F: f64 = 2.718281828;
pub const CL_M_LOG2E_F: f64 = 1.442695041;
pub const CL_M_LOG10E_F: f64 = 0.434294482;
pub const CL_M_LN2_F: f64 = 0.693147181;
pub const CL_M_LN10_F: f64 = 2.302585093;
pub const CL_M_PI_F: f64 = 3.141592654;
pub const CL_M_PI_2_F: f64 = 1.570796327;
pub const CL_M_PI_4_F: f64 = 0.785398163;
pub const CL_M_1_PI_F: f64 = 0.318309886;
pub const CL_M_2_PI_F: f64 = 0.636619772;
pub const CL_M_2_SQRTPI_F: f64 = 1.128379167;
pub const CL_M_SQRT2_F: f64 = 1.414213562;
pub const CL_M_SQRT1_2_F: f64 = 0.707106781;
pub const CL_MAXFLOAT: f64 = 340282346638528860000000000000000000000.0;
pub const CL_HAS_NAMED_VECTOR_FIELDS: u32 = 1;
pub const CL_HAS_HI_LO_VECTOR_FIELDS: u32 = 1;
pub const CL_NAME_VERSION_MAX_NAME_SIZE: u32 = 64;
pub const CL_SUCCESS: u32 = 0;
pub const CL_DEVICE_NOT_FOUND: i32 = -1;
pub const CL_DEVICE_NOT_AVAILABLE: i32 = -2;
pub const CL_COMPILER_NOT_AVAILABLE: i32 = -3;
pub const CL_MEM_OBJECT_ALLOCATION_FAILURE: i32 = -4;
pub const CL_OUT_OF_RESOURCES: i32 = -5;
pub const CL_OUT_OF_HOST_MEMORY: i32 = -6;
pub const CL_PROFILING_INFO_NOT_AVAILABLE: i32 = -7;
pub const CL_MEM_COPY_OVERLAP: i32 = -8;
pub const CL_IMAGE_FORMAT_MISMATCH: i32 = -9;
pub const CL_IMAGE_FORMAT_NOT_SUPPORTED: i32 = -10;
pub const CL_BUILD_PROGRAM_FAILURE: i32 = -11;
pub const CL_MAP_FAILURE: i32 = -12;
pub const CL_MISALIGNED_SUB_BUFFER_OFFSET: i32 = -13;
pub const CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST: i32 = -14;
pub const CL_COMPILE_PROGRAM_FAILURE: i32 = -15;
pub const CL_LINKER_NOT_AVAILABLE: i32 = -16;
pub const CL_LINK_PROGRAM_FAILURE: i32 = -17;
pub const CL_DEVICE_PARTITION_FAILED: i32 = -18;
pub const CL_KERNEL_ARG_INFO_NOT_AVAILABLE: i32 = -19;
pub const CL_INVALID_VALUE: i32 = -30;
pub const CL_INVALID_DEVICE_TYPE: i32 = -31;
pub const CL_INVALID_PLATFORM: i32 = -32;
pub const CL_INVALID_DEVICE: i32 = -33;
pub const CL_INVALID_CONTEXT: i32 = -34;
pub const CL_INVALID_QUEUE_PROPERTIES: i32 = -35;
pub const CL_INVALID_COMMAND_QUEUE: i32 = -36;
pub const CL_INVALID_HOST_PTR: i32 = -37;
pub const CL_INVALID_MEM_OBJECT: i32 = -38;
pub const CL_INVALID_IMAGE_FORMAT_DESCRIPTOR: i32 = -39;
pub const CL_INVALID_IMAGE_SIZE: i32 = -40;
pub const CL_INVALID_SAMPLER: i32 = -41;
pub const CL_INVALID_BINARY: i32 = -42;
pub const CL_INVALID_BUILD_OPTIONS: i32 = -43;
pub const CL_INVALID_PROGRAM: i32 = -44;
pub const CL_INVALID_PROGRAM_EXECUTABLE: i32 = -45;
pub const CL_INVALID_KERNEL_NAME: i32 = -46;
pub const CL_INVALID_KERNEL_DEFINITION: i32 = -47;
pub const CL_INVALID_KERNEL: i32 = -48;
pub const CL_INVALID_ARG_INDEX: i32 = -49;
pub const CL_INVALID_ARG_VALUE: i32 = -50;
pub const CL_INVALID_ARG_SIZE: i32 = -51;
pub const CL_INVALID_KERNEL_ARGS: i32 = -52;
pub const CL_INVALID_WORK_DIMENSION: i32 = -53;
pub const CL_INVALID_WORK_GROUP_SIZE: i32 = -54;
pub const CL_INVALID_WORK_ITEM_SIZE: i32 = -55;
pub const CL_INVALID_GLOBAL_OFFSET: i32 = -56;
pub const CL_INVALID_EVENT_WAIT_LIST: i32 = -57;
pub const CL_INVALID_EVENT: i32 = -58;
pub const CL_INVALID_OPERATION: i32 = -59;
pub const CL_INVALID_GL_OBJECT: i32 = -60;
pub const CL_INVALID_BUFFER_SIZE: i32 = -61;
pub const CL_INVALID_MIP_LEVEL: i32 = -62;
pub const CL_INVALID_GLOBAL_WORK_SIZE: i32 = -63;
pub const CL_INVALID_PROPERTY: i32 = -64;
pub const CL_INVALID_IMAGE_DESCRIPTOR: i32 = -65;
pub const CL_INVALID_COMPILER_OPTIONS: i32 = -66;
pub const CL_INVALID_LINKER_OPTIONS: i32 = -67;
pub const CL_INVALID_DEVICE_PARTITION_COUNT: i32 = -68;
pub const CL_INVALID_PIPE_SIZE: i32 = -69;
pub const CL_INVALID_DEVICE_QUEUE: i32 = -70;
pub const CL_INVALID_SPEC_ID: i32 = -71;
pub const CL_MAX_SIZE_RESTRICTION_EXCEEDED: i32 = -72;
pub const CL_FALSE: u32 = 0;
pub const CL_TRUE: u32 = 1;
pub const CL_BLOCKING: u32 = 1;
pub const CL_NON_BLOCKING: u32 = 0;
pub const CL_PLATFORM_PROFILE: u32 = 2304;
pub const CL_PLATFORM_VERSION: u32 = 2305;
pub const CL_PLATFORM_NAME: u32 = 2306;
pub const CL_PLATFORM_VENDOR: u32 = 2307;
pub const CL_PLATFORM_EXTENSIONS: u32 = 2308;
pub const CL_PLATFORM_HOST_TIMER_RESOLUTION: u32 = 2309;
pub const CL_PLATFORM_NUMERIC_VERSION: u32 = 2310;
pub const CL_PLATFORM_EXTENSIONS_WITH_VERSION: u32 = 2311;
pub const CL_DEVICE_TYPE_DEFAULT: u32 = 1;
pub const CL_DEVICE_TYPE_CPU: u32 = 2;
pub const CL_DEVICE_TYPE_GPU: u32 = 4;
pub const CL_DEVICE_TYPE_ACCELERATOR: u32 = 8;
pub const CL_DEVICE_TYPE_CUSTOM: u32 = 16;
pub const CL_DEVICE_TYPE_ALL: u32 = 4294967295;
pub const CL_DEVICE_TYPE: u32 = 4096;
pub const CL_DEVICE_VENDOR_ID: u32 = 4097;
pub const CL_DEVICE_MAX_COMPUTE_UNITS: u32 = 4098;
pub const CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS: u32 = 4099;
pub const CL_DEVICE_MAX_WORK_GROUP_SIZE: u32 = 4100;
pub const CL_DEVICE_MAX_WORK_ITEM_SIZES: u32 = 4101;
pub const CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR: u32 = 4102;
pub const CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT: u32 = 4103;
pub const CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT: u32 = 4104;
pub const CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG: u32 = 4105;
pub const CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT: u32 = 4106;
pub const CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE: u32 = 4107;
pub const CL_DEVICE_MAX_CLOCK_FREQUENCY: u32 = 4108;
pub const CL_DEVICE_ADDRESS_BITS: u32 = 4109;
pub const CL_DEVICE_MAX_READ_IMAGE_ARGS: u32 = 4110;
pub const CL_DEVICE_MAX_WRITE_IMAGE_ARGS: u32 = 4111;
pub const CL_DEVICE_MAX_MEM_ALLOC_SIZE: u32 = 4112;
pub const CL_DEVICE_IMAGE2D_MAX_WIDTH: u32 = 4113;
pub const CL_DEVICE_IMAGE2D_MAX_HEIGHT: u32 = 4114;
pub const CL_DEVICE_IMAGE3D_MAX_WIDTH: u32 = 4115;
pub const CL_DEVICE_IMAGE3D_MAX_HEIGHT: u32 = 4116;
pub const CL_DEVICE_IMAGE3D_MAX_DEPTH: u32 = 4117;
pub const CL_DEVICE_IMAGE_SUPPORT: u32 = 4118;
pub const CL_DEVICE_MAX_PARAMETER_SIZE: u32 = 4119;
pub const CL_DEVICE_MAX_SAMPLERS: u32 = 4120;
pub const CL_DEVICE_MEM_BASE_ADDR_ALIGN: u32 = 4121;
pub const CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE: u32 = 4122;
pub const CL_DEVICE_SINGLE_FP_CONFIG: u32 = 4123;
pub const CL_DEVICE_GLOBAL_MEM_CACHE_TYPE: u32 = 4124;
pub const CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE: u32 = 4125;
pub const CL_DEVICE_GLOBAL_MEM_CACHE_SIZE: u32 = 4126;
pub const CL_DEVICE_GLOBAL_MEM_SIZE: u32 = 4127;
pub const CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE: u32 = 4128;
pub const CL_DEVICE_MAX_CONSTANT_ARGS: u32 = 4129;
pub const CL_DEVICE_LOCAL_MEM_TYPE: u32 = 4130;
pub const CL_DEVICE_LOCAL_MEM_SIZE: u32 = 4131;
pub const CL_DEVICE_ERROR_CORRECTION_SUPPORT: u32 = 4132;
pub const CL_DEVICE_PROFILING_TIMER_RESOLUTION: u32 = 4133;
pub const CL_DEVICE_ENDIAN_LITTLE: u32 = 4134;
pub const CL_DEVICE_AVAILABLE: u32 = 4135;
pub const CL_DEVICE_COMPILER_AVAILABLE: u32 = 4136;
pub const CL_DEVICE_EXECUTION_CAPABILITIES: u32 = 4137;
pub const CL_DEVICE_QUEUE_PROPERTIES: u32 = 4138;
pub const CL_DEVICE_QUEUE_ON_HOST_PROPERTIES: u32 = 4138;
pub const CL_DEVICE_NAME: u32 = 4139;
pub const CL_DEVICE_VENDOR: u32 = 4140;
pub const CL_DRIVER_VERSION: u32 = 4141;
pub const CL_DEVICE_PROFILE: u32 = 4142;
pub const CL_DEVICE_VERSION: u32 = 4143;
pub const CL_DEVICE_EXTENSIONS: u32 = 4144;
pub const CL_DEVICE_PLATFORM: u32 = 4145;
pub const CL_DEVICE_DOUBLE_FP_CONFIG: u32 = 4146;
pub const CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF: u32 = 4148;
pub const CL_DEVICE_HOST_UNIFIED_MEMORY: u32 = 4149;
pub const CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR: u32 = 4150;
pub const CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT: u32 = 4151;
pub const CL_DEVICE_NATIVE_VECTOR_WIDTH_INT: u32 = 4152;
pub const CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG: u32 = 4153;
pub const CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT: u32 = 4154;
pub const CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE: u32 = 4155;
pub const CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF: u32 = 4156;
pub const CL_DEVICE_OPENCL_C_VERSION: u32 = 4157;
pub const CL_DEVICE_LINKER_AVAILABLE: u32 = 4158;
pub const CL_DEVICE_BUILT_IN_KERNELS: u32 = 4159;
pub const CL_DEVICE_IMAGE_MAX_BUFFER_SIZE: u32 = 4160;
pub const CL_DEVICE_IMAGE_MAX_ARRAY_SIZE: u32 = 4161;
pub const CL_DEVICE_PARENT_DEVICE: u32 = 4162;
pub const CL_DEVICE_PARTITION_MAX_SUB_DEVICES: u32 = 4163;
pub const CL_DEVICE_PARTITION_PROPERTIES: u32 = 4164;
pub const CL_DEVICE_PARTITION_AFFINITY_DOMAIN: u32 = 4165;
pub const CL_DEVICE_PARTITION_TYPE: u32 = 4166;
pub const CL_DEVICE_REFERENCE_COUNT: u32 = 4167;
pub const CL_DEVICE_PREFERRED_INTEROP_USER_SYNC: u32 = 4168;
pub const CL_DEVICE_PRINTF_BUFFER_SIZE: u32 = 4169;
pub const CL_DEVICE_IMAGE_PITCH_ALIGNMENT: u32 = 4170;
pub const CL_DEVICE_IMAGE_BASE_ADDRESS_ALIGNMENT: u32 = 4171;
pub const CL_DEVICE_MAX_READ_WRITE_IMAGE_ARGS: u32 = 4172;
pub const CL_DEVICE_MAX_GLOBAL_VARIABLE_SIZE: u32 = 4173;
pub const CL_DEVICE_QUEUE_ON_DEVICE_PROPERTIES: u32 = 4174;
pub const CL_DEVICE_QUEUE_ON_DEVICE_PREFERRED_SIZE: u32 = 4175;
pub const CL_DEVICE_QUEUE_ON_DEVICE_MAX_SIZE: u32 = 4176;
pub const CL_DEVICE_MAX_ON_DEVICE_QUEUES: u32 = 4177;
pub const CL_DEVICE_MAX_ON_DEVICE_EVENTS: u32 = 4178;
pub const CL_DEVICE_SVM_CAPABILITIES: u32 = 4179;
pub const CL_DEVICE_GLOBAL_VARIABLE_PREFERRED_TOTAL_SIZE: u32 = 4180;
pub const CL_DEVICE_MAX_PIPE_ARGS: u32 = 4181;
pub const CL_DEVICE_PIPE_MAX_ACTIVE_RESERVATIONS: u32 = 4182;
pub const CL_DEVICE_PIPE_MAX_PACKET_SIZE: u32 = 4183;
pub const CL_DEVICE_PREFERRED_PLATFORM_ATOMIC_ALIGNMENT: u32 = 4184;
pub const CL_DEVICE_PREFERRED_GLOBAL_ATOMIC_ALIGNMENT: u32 = 4185;
pub const CL_DEVICE_PREFERRED_LOCAL_ATOMIC_ALIGNMENT: u32 = 4186;
pub const CL_DEVICE_IL_VERSION: u32 = 4187;
pub const CL_DEVICE_MAX_NUM_SUB_GROUPS: u32 = 4188;
pub const CL_DEVICE_SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS: u32 = 4189;
pub const CL_DEVICE_NUMERIC_VERSION: u32 = 4190;
pub const CL_DEVICE_EXTENSIONS_WITH_VERSION: u32 = 4192;
pub const CL_DEVICE_ILS_WITH_VERSION: u32 = 4193;
pub const CL_DEVICE_BUILT_IN_KERNELS_WITH_VERSION: u32 = 4194;
pub const CL_DEVICE_ATOMIC_MEMORY_CAPABILITIES: u32 = 4195;
pub const CL_DEVICE_ATOMIC_FENCE_CAPABILITIES: u32 = 4196;
pub const CL_DEVICE_NON_UNIFORM_WORK_GROUP_SUPPORT: u32 = 4197;
pub const CL_DEVICE_OPENCL_C_ALL_VERSIONS: u32 = 4198;
pub const CL_DEVICE_PREFERRED_WORK_GROUP_SIZE_MULTIPLE: u32 = 4199;
pub const CL_DEVICE_WORK_GROUP_COLLECTIVE_FUNCTIONS_SUPPORT: u32 = 4200;
pub const CL_DEVICE_GENERIC_ADDRESS_SPACE_SUPPORT: u32 = 4201;
pub const CL_DEVICE_OPENCL_C_FEATURES: u32 = 4207;
pub const CL_DEVICE_DEVICE_ENQUEUE_CAPABILITIES: u32 = 4208;
pub const CL_DEVICE_PIPE_SUPPORT: u32 = 4209;
pub const CL_DEVICE_LATEST_CONFORMANCE_VERSION_PASSED: u32 = 4210;
pub const CL_FP_DENORM: u32 = 1;
pub const CL_FP_INF_NAN: u32 = 2;
pub const CL_FP_ROUND_TO_NEAREST: u32 = 4;
pub const CL_FP_ROUND_TO_ZERO: u32 = 8;
pub const CL_FP_ROUND_TO_INF: u32 = 16;
pub const CL_FP_FMA: u32 = 32;
pub const CL_FP_SOFT_FLOAT: u32 = 64;
pub const CL_FP_CORRECTLY_ROUNDED_DIVIDE_SQRT: u32 = 128;
pub const CL_NONE: u32 = 0;
pub const CL_READ_ONLY_CACHE: u32 = 1;
pub const CL_READ_WRITE_CACHE: u32 = 2;
pub const CL_LOCAL: u32 = 1;
pub const CL_GLOBAL: u32 = 2;
pub const CL_EXEC_KERNEL: u32 = 1;
pub const CL_EXEC_NATIVE_KERNEL: u32 = 2;
pub const CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE: u32 = 1;
pub const CL_QUEUE_PROFILING_ENABLE: u32 = 2;
pub const CL_QUEUE_ON_DEVICE: u32 = 4;
pub const CL_QUEUE_ON_DEVICE_DEFAULT: u32 = 8;
pub const CL_CONTEXT_REFERENCE_COUNT: u32 = 4224;
pub const CL_CONTEXT_DEVICES: u32 = 4225;
pub const CL_CONTEXT_PROPERTIES: u32 = 4226;
pub const CL_CONTEXT_NUM_DEVICES: u32 = 4227;
pub const CL_CONTEXT_PLATFORM: u32 = 4228;
pub const CL_CONTEXT_INTEROP_USER_SYNC: u32 = 4229;
pub const CL_DEVICE_PARTITION_EQUALLY: u32 = 4230;
pub const CL_DEVICE_PARTITION_BY_COUNTS: u32 = 4231;
pub const CL_DEVICE_PARTITION_BY_COUNTS_LIST_END: u32 = 0;
pub const CL_DEVICE_PARTITION_BY_AFFINITY_DOMAIN: u32 = 4232;
pub const CL_DEVICE_AFFINITY_DOMAIN_NUMA: u32 = 1;
pub const CL_DEVICE_AFFINITY_DOMAIN_L4_CACHE: u32 = 2;
pub const CL_DEVICE_AFFINITY_DOMAIN_L3_CACHE: u32 = 4;
pub const CL_DEVICE_AFFINITY_DOMAIN_L2_CACHE: u32 = 8;
pub const CL_DEVICE_AFFINITY_DOMAIN_L1_CACHE: u32 = 16;
pub const CL_DEVICE_AFFINITY_DOMAIN_NEXT_PARTITIONABLE: u32 = 32;
pub const CL_DEVICE_SVM_COARSE_GRAIN_BUFFER: u32 = 1;
pub const CL_DEVICE_SVM_FINE_GRAIN_BUFFER: u32 = 2;
pub const CL_DEVICE_SVM_FINE_GRAIN_SYSTEM: u32 = 4;
pub const CL_DEVICE_SVM_ATOMICS: u32 = 8;
pub const CL_QUEUE_CONTEXT: u32 = 4240;
pub const CL_QUEUE_DEVICE: u32 = 4241;
pub const CL_QUEUE_REFERENCE_COUNT: u32 = 4242;
pub const CL_QUEUE_PROPERTIES: u32 = 4243;
pub const CL_QUEUE_SIZE: u32 = 4244;
pub const CL_QUEUE_DEVICE_DEFAULT: u32 = 4245;
pub const CL_QUEUE_PROPERTIES_ARRAY: u32 = 4248;
pub const CL_MEM_READ_WRITE: u32 = 1;
pub const CL_MEM_WRITE_ONLY: u32 = 2;
pub const CL_MEM_READ_ONLY: u32 = 4;
pub const CL_MEM_USE_HOST_PTR: u32 = 8;
pub const CL_MEM_ALLOC_HOST_PTR: u32 = 16;
pub const CL_MEM_COPY_HOST_PTR: u32 = 32;
pub const CL_MEM_HOST_WRITE_ONLY: u32 = 128;
pub const CL_MEM_HOST_READ_ONLY: u32 = 256;
pub const CL_MEM_HOST_NO_ACCESS: u32 = 512;
pub const CL_MEM_SVM_FINE_GRAIN_BUFFER: u32 = 1024;
pub const CL_MEM_SVM_ATOMICS: u32 = 2048;
pub const CL_MEM_KERNEL_READ_AND_WRITE: u32 = 4096;
pub const CL_MIGRATE_MEM_OBJECT_HOST: u32 = 1;
pub const CL_MIGRATE_MEM_OBJECT_CONTENT_UNDEFINED: u32 = 2;
pub const CL_R: u32 = 4272;
pub const CL_A: u32 = 4273;
pub const CL_RG: u32 = 4274;
pub const CL_RA: u32 = 4275;
pub const CL_RGB: u32 = 4276;
pub const CL_RGBA: u32 = 4277;
pub const CL_BGRA: u32 = 4278;
pub const CL_ARGB: u32 = 4279;
pub const CL_INTENSITY: u32 = 4280;
pub const CL_LUMINANCE: u32 = 4281;
pub const CL_Rx: u32 = 4282;
pub const CL_RGx: u32 = 4283;
pub const CL_RGBx: u32 = 4284;
pub const CL_DEPTH: u32 = 4285;
pub const CL_sRGB: u32 = 4287;
pub const CL_sRGBx: u32 = 4288;
pub const CL_sRGBA: u32 = 4289;
pub const CL_sBGRA: u32 = 4290;
pub const CL_ABGR: u32 = 4291;
pub const CL_SNORM_INT8: u32 = 4304;
pub const CL_SNORM_INT16: u32 = 4305;
pub const CL_UNORM_INT8: u32 = 4306;
pub const CL_UNORM_INT16: u32 = 4307;
pub const CL_UNORM_SHORT_565: u32 = 4308;
pub const CL_UNORM_SHORT_555: u32 = 4309;
pub const CL_UNORM_INT_101010: u32 = 4310;
pub const CL_SIGNED_INT8: u32 = 4311;
pub const CL_SIGNED_INT16: u32 = 4312;
pub const CL_SIGNED_INT32: u32 = 4313;
pub const CL_UNSIGNED_INT8: u32 = 4314;
pub const CL_UNSIGNED_INT16: u32 = 4315;
pub const CL_UNSIGNED_INT32: u32 = 4316;
pub const CL_HALF_FLOAT: u32 = 4317;
pub const CL_FLOAT: u32 = 4318;
pub const CL_UNORM_INT_101010_2: u32 = 4320;
pub const CL_MEM_OBJECT_BUFFER: u32 = 4336;
pub const CL_MEM_OBJECT_IMAGE2D: u32 = 4337;
pub const CL_MEM_OBJECT_IMAGE3D: u32 = 4338;
pub const CL_MEM_OBJECT_IMAGE2D_ARRAY: u32 = 4339;
pub const CL_MEM_OBJECT_IMAGE1D: u32 = 4340;
pub const CL_MEM_OBJECT_IMAGE1D_ARRAY: u32 = 4341;
pub const CL_MEM_OBJECT_IMAGE1D_BUFFER: u32 = 4342;
pub const CL_MEM_OBJECT_PIPE: u32 = 4343;
pub const CL_MEM_TYPE: u32 = 4352;
pub const CL_MEM_FLAGS: u32 = 4353;
pub const CL_MEM_SIZE: u32 = 4354;
pub const CL_MEM_HOST_PTR: u32 = 4355;
pub const CL_MEM_MAP_COUNT: u32 = 4356;
pub const CL_MEM_REFERENCE_COUNT: u32 = 4357;
pub const CL_MEM_CONTEXT: u32 = 4358;
pub const CL_MEM_ASSOCIATED_MEMOBJECT: u32 = 4359;
pub const CL_MEM_OFFSET: u32 = 4360;
pub const CL_MEM_USES_SVM_POINTER: u32 = 4361;
pub const CL_MEM_PROPERTIES: u32 = 4362;
pub const CL_IMAGE_FORMAT: u32 = 4368;
pub const CL_IMAGE_ELEMENT_SIZE: u32 = 4369;
pub const CL_IMAGE_ROW_PITCH: u32 = 4370;
pub const CL_IMAGE_SLICE_PITCH: u32 = 4371;
pub const CL_IMAGE_WIDTH: u32 = 4372;
pub const CL_IMAGE_HEIGHT: u32 = 4373;
pub const CL_IMAGE_DEPTH: u32 = 4374;
pub const CL_IMAGE_ARRAY_SIZE: u32 = 4375;
pub const CL_IMAGE_BUFFER: u32 = 4376;
pub const CL_IMAGE_NUM_MIP_LEVELS: u32 = 4377;
pub const CL_IMAGE_NUM_SAMPLES: u32 = 4378;
pub const CL_PIPE_PACKET_SIZE: u32 = 4384;
pub const CL_PIPE_MAX_PACKETS: u32 = 4385;
pub const CL_PIPE_PROPERTIES: u32 = 4386;
pub const CL_ADDRESS_NONE: u32 = 4400;
pub const CL_ADDRESS_CLAMP_TO_EDGE: u32 = 4401;
pub const CL_ADDRESS_CLAMP: u32 = 4402;
pub const CL_ADDRESS_REPEAT: u32 = 4403;
pub const CL_ADDRESS_MIRRORED_REPEAT: u32 = 4404;
pub const CL_FILTER_NEAREST: u32 = 4416;
pub const CL_FILTER_LINEAR: u32 = 4417;
pub const CL_SAMPLER_REFERENCE_COUNT: u32 = 4432;
pub const CL_SAMPLER_CONTEXT: u32 = 4433;
pub const CL_SAMPLER_NORMALIZED_COORDS: u32 = 4434;
pub const CL_SAMPLER_ADDRESSING_MODE: u32 = 4435;
pub const CL_SAMPLER_FILTER_MODE: u32 = 4436;
pub const CL_SAMPLER_MIP_FILTER_MODE: u32 = 4437;
pub const CL_SAMPLER_LOD_MIN: u32 = 4438;
pub const CL_SAMPLER_LOD_MAX: u32 = 4439;
pub const CL_SAMPLER_PROPERTIES: u32 = 4440;
pub const CL_MAP_READ: u32 = 1;
pub const CL_MAP_WRITE: u32 = 2;
pub const CL_MAP_WRITE_INVALIDATE_REGION: u32 = 4;
pub const CL_PROGRAM_REFERENCE_COUNT: u32 = 4448;
pub const CL_PROGRAM_CONTEXT: u32 = 4449;
pub const CL_PROGRAM_NUM_DEVICES: u32 = 4450;
pub const CL_PROGRAM_DEVICES: u32 = 4451;
pub const CL_PROGRAM_SOURCE: u32 = 4452;
pub const CL_PROGRAM_BINARY_SIZES: u32 = 4453;
pub const CL_PROGRAM_BINARIES: u32 = 4454;
pub const CL_PROGRAM_NUM_KERNELS: u32 = 4455;
pub const CL_PROGRAM_KERNEL_NAMES: u32 = 4456;
pub const CL_PROGRAM_IL: u32 = 4457;
pub const CL_PROGRAM_SCOPE_GLOBAL_CTORS_PRESENT: u32 = 4458;
pub const CL_PROGRAM_SCOPE_GLOBAL_DTORS_PRESENT: u32 = 4459;
pub const CL_PROGRAM_BUILD_STATUS: u32 = 4481;
pub const CL_PROGRAM_BUILD_OPTIONS: u32 = 4482;
pub const CL_PROGRAM_BUILD_LOG: u32 = 4483;
pub const CL_PROGRAM_BINARY_TYPE: u32 = 4484;
pub const CL_PROGRAM_BUILD_GLOBAL_VARIABLE_TOTAL_SIZE: u32 = 4485;
pub const CL_PROGRAM_BINARY_TYPE_NONE: u32 = 0;
pub const CL_PROGRAM_BINARY_TYPE_COMPILED_OBJECT: u32 = 1;
pub const CL_PROGRAM_BINARY_TYPE_LIBRARY: u32 = 2;
pub const CL_PROGRAM_BINARY_TYPE_EXECUTABLE: u32 = 4;
pub const CL_BUILD_SUCCESS: u32 = 0;
pub const CL_BUILD_NONE: i32 = -1;
pub const CL_BUILD_ERROR: i32 = -2;
pub const CL_BUILD_IN_PROGRESS: i32 = -3;
pub const CL_KERNEL_FUNCTION_NAME: u32 = 4496;
pub const CL_KERNEL_NUM_ARGS: u32 = 4497;
pub const CL_KERNEL_REFERENCE_COUNT: u32 = 4498;
pub const CL_KERNEL_CONTEXT: u32 = 4499;
pub const CL_KERNEL_PROGRAM: u32 = 4500;
pub const CL_KERNEL_ATTRIBUTES: u32 = 4501;
pub const CL_KERNEL_ARG_ADDRESS_QUALIFIER: u32 = 4502;
pub const CL_KERNEL_ARG_ACCESS_QUALIFIER: u32 = 4503;
pub const CL_KERNEL_ARG_TYPE_NAME: u32 = 4504;
pub const CL_KERNEL_ARG_TYPE_QUALIFIER: u32 = 4505;
pub const CL_KERNEL_ARG_NAME: u32 = 4506;
pub const CL_KERNEL_ARG_ADDRESS_GLOBAL: u32 = 4507;
pub const CL_KERNEL_ARG_ADDRESS_LOCAL: u32 = 4508;
pub const CL_KERNEL_ARG_ADDRESS_CONSTANT: u32 = 4509;
pub const CL_KERNEL_ARG_ADDRESS_PRIVATE: u32 = 4510;
pub const CL_KERNEL_ARG_ACCESS_READ_ONLY: u32 = 4512;
pub const CL_KERNEL_ARG_ACCESS_WRITE_ONLY: u32 = 4513;
pub const CL_KERNEL_ARG_ACCESS_READ_WRITE: u32 = 4514;
pub const CL_KERNEL_ARG_ACCESS_NONE: u32 = 4515;
pub const CL_KERNEL_ARG_TYPE_NONE: u32 = 0;
pub const CL_KERNEL_ARG_TYPE_CONST: u32 = 1;
pub const CL_KERNEL_ARG_TYPE_RESTRICT: u32 = 2;
pub const CL_KERNEL_ARG_TYPE_VOLATILE: u32 = 4;
pub const CL_KERNEL_ARG_TYPE_PIPE: u32 = 8;
pub const CL_KERNEL_WORK_GROUP_SIZE: u32 = 4528;
pub const CL_KERNEL_COMPILE_WORK_GROUP_SIZE: u32 = 4529;
pub const CL_KERNEL_LOCAL_MEM_SIZE: u32 = 4530;
pub const CL_KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE: u32 = 4531;
pub const CL_KERNEL_PRIVATE_MEM_SIZE: u32 = 4532;
pub const CL_KERNEL_GLOBAL_WORK_SIZE: u32 = 4533;
pub const CL_KERNEL_MAX_SUB_GROUP_SIZE_FOR_NDRANGE: u32 = 8243;
pub const CL_KERNEL_SUB_GROUP_COUNT_FOR_NDRANGE: u32 = 8244;
pub const CL_KERNEL_LOCAL_SIZE_FOR_SUB_GROUP_COUNT: u32 = 4536;
pub const CL_KERNEL_MAX_NUM_SUB_GROUPS: u32 = 4537;
pub const CL_KERNEL_COMPILE_NUM_SUB_GROUPS: u32 = 4538;
pub const CL_KERNEL_EXEC_INFO_SVM_PTRS: u32 = 4534;
pub const CL_KERNEL_EXEC_INFO_SVM_FINE_GRAIN_SYSTEM: u32 = 4535;
pub const CL_EVENT_COMMAND_QUEUE: u32 = 4560;
pub const CL_EVENT_COMMAND_TYPE: u32 = 4561;
pub const CL_EVENT_REFERENCE_COUNT: u32 = 4562;
pub const CL_EVENT_COMMAND_EXECUTION_STATUS: u32 = 4563;
pub const CL_EVENT_CONTEXT: u32 = 4564;
pub const CL_COMMAND_NDRANGE_KERNEL: u32 = 4592;
pub const CL_COMMAND_TASK: u32 = 4593;
pub const CL_COMMAND_NATIVE_KERNEL: u32 = 4594;
pub const CL_COMMAND_READ_BUFFER: u32 = 4595;
pub const CL_COMMAND_WRITE_BUFFER: u32 = 4596;
pub const CL_COMMAND_COPY_BUFFER: u32 = 4597;
pub const CL_COMMAND_READ_IMAGE: u32 = 4598;
pub const CL_COMMAND_WRITE_IMAGE: u32 = 4599;
pub const CL_COMMAND_COPY_IMAGE: u32 = 4600;
pub const CL_COMMAND_COPY_IMAGE_TO_BUFFER: u32 = 4601;
pub const CL_COMMAND_COPY_BUFFER_TO_IMAGE: u32 = 4602;
pub const CL_COMMAND_MAP_BUFFER: u32 = 4603;
pub const CL_COMMAND_MAP_IMAGE: u32 = 4604;
pub const CL_COMMAND_UNMAP_MEM_OBJECT: u32 = 4605;
pub const CL_COMMAND_MARKER: u32 = 4606;
pub const CL_COMMAND_ACQUIRE_GL_OBJECTS: u32 = 4607;
pub const CL_COMMAND_RELEASE_GL_OBJECTS: u32 = 4608;
pub const CL_COMMAND_READ_BUFFER_RECT: u32 = 4609;
pub const CL_COMMAND_WRITE_BUFFER_RECT: u32 = 4610;
pub const CL_COMMAND_COPY_BUFFER_RECT: u32 = 4611;
pub const CL_COMMAND_USER: u32 = 4612;
pub const CL_COMMAND_BARRIER: u32 = 4613;
pub const CL_COMMAND_MIGRATE_MEM_OBJECTS: u32 = 4614;
pub const CL_COMMAND_FILL_BUFFER: u32 = 4615;
pub const CL_COMMAND_FILL_IMAGE: u32 = 4616;
pub const CL_COMMAND_SVM_FREE: u32 = 4617;
pub const CL_COMMAND_SVM_MEMCPY: u32 = 4618;
pub const CL_COMMAND_SVM_MEMFILL: u32 = 4619;
pub const CL_COMMAND_SVM_MAP: u32 = 4620;
pub const CL_COMMAND_SVM_UNMAP: u32 = 4621;
pub const CL_COMMAND_SVM_MIGRATE_MEM: u32 = 4622;
pub const CL_COMPLETE: u32 = 0;
pub const CL_RUNNING: u32 = 1;
pub const CL_SUBMITTED: u32 = 2;
pub const CL_QUEUED: u32 = 3;
pub const CL_BUFFER_CREATE_TYPE_REGION: u32 = 4640;
pub const CL_PROFILING_COMMAND_QUEUED: u32 = 4736;
pub const CL_PROFILING_COMMAND_SUBMIT: u32 = 4737;
pub const CL_PROFILING_COMMAND_START: u32 = 4738;
pub const CL_PROFILING_COMMAND_END: u32 = 4739;
pub const CL_PROFILING_COMMAND_COMPLETE: u32 = 4740;
pub const CL_DEVICE_ATOMIC_ORDER_RELAXED: u32 = 1;
pub const CL_DEVICE_ATOMIC_ORDER_ACQ_REL: u32 = 2;
pub const CL_DEVICE_ATOMIC_ORDER_SEQ_CST: u32 = 4;
pub const CL_DEVICE_ATOMIC_SCOPE_WORK_ITEM: u32 = 8;
pub const CL_DEVICE_ATOMIC_SCOPE_WORK_GROUP: u32 = 16;
pub const CL_DEVICE_ATOMIC_SCOPE_DEVICE: u32 = 32;
pub const CL_DEVICE_ATOMIC_SCOPE_ALL_DEVICES: u32 = 64;
pub const CL_DEVICE_QUEUE_SUPPORTED: u32 = 1;
pub const CL_DEVICE_QUEUE_REPLACEABLE_DEFAULT: u32 = 2;
pub const CL_KHRONOS_VENDOR_ID_CODEPLAY: u32 = 65540;
pub const CL_VERSION_MAJOR_BITS: u32 = 10;
pub const CL_VERSION_MINOR_BITS: u32 = 10;
pub const CL_VERSION_PATCH_BITS: u32 = 12;
pub const CL_VERSION_MAJOR_MASK: u32 = 1023;
pub const CL_VERSION_MINOR_MASK: u32 = 1023;
pub const CL_VERSION_PATCH_MASK: u32 = 4095;
pub type cl_char = ::std::os::raw::c_schar;
pub type cl_uchar = ::std::os::raw::c_uchar;
pub type cl_short = ::std::os::raw::c_short;
pub type cl_ushort = ::std::os::raw::c_ushort;
pub type cl_int = ::std::os::raw::c_int;
pub type cl_uint = ::std::os::raw::c_uint;
pub type cl_long = ::std::os::raw::c_longlong;
pub type cl_ulong = ::std::os::raw::c_ulonglong;
pub type cl_half = ::std::os::raw::c_ushort;
pub type cl_float = f32;
pub type cl_double = f64;
pub type __m64 = [::std::os::raw::c_longlong; 1usize];
pub type __m128i = [::std::os::raw::c_longlong; 2usize];
pub type __m128 = [f32; 4usize];
pub type __m128d = [f64; 2usize];
pub type __cl_float4 = __m128;
pub type __cl_uchar16 = __m128i;
pub type __cl_char16 = __m128i;
pub type __cl_ushort8 = __m128i;
pub type __cl_short8 = __m128i;
pub type __cl_uint4 = __m128i;
pub type __cl_int4 = __m128i;
pub type __cl_ulong2 = __m128i;
pub type __cl_long2 = __m128i;
pub type __cl_double2 = __m128d;
pub type __cl_uchar8 = __m64;
pub type __cl_char8 = __m64;
pub type __cl_ushort4 = __m64;
pub type __cl_short4 = __m64;
pub type __cl_uint2 = __m64;
pub type __cl_int2 = __m64;
pub type __cl_float2 = __m64;
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_char2 {
    pub s: [cl_char; 2usize],
    pub __bindgen_anon_1: cl_char2__bindgen_ty_1,
    pub __bindgen_anon_2: cl_char2__bindgen_ty_2,
    pub __bindgen_anon_3: cl_char2__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_char2__bindgen_ty_1 {
    pub x: cl_char,
    pub y: cl_char,
}
#[test]
fn bindgen_test_layout_cl_char2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_char2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_char2__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(cl_char2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_char2__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_char2__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char2__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char2__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_char2__bindgen_ty_2 {
    pub s0: cl_char,
    pub s1: cl_char,
}
#[test]
fn bindgen_test_layout_cl_char2__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_char2__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_char2__bindgen_ty_2>(),
        2usize,
        concat!("Size of: ", stringify!(cl_char2__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_char2__bindgen_ty_2>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_char2__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char2__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char2__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_char2__bindgen_ty_3 {
    pub lo: cl_char,
    pub hi: cl_char,
}
#[test]
fn bindgen_test_layout_cl_char2__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_char2__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_char2__bindgen_ty_3>(),
        2usize,
        concat!("Size of: ", stringify!(cl_char2__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_char2__bindgen_ty_3>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_char2__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char2__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char2__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_char2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_char2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_char2>(),
        2usize,
        concat!("Size of: ", stringify!(cl_char2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_char2>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_char2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char2),
            "::",
            stringify!(s)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_char4 {
    pub s: [cl_char; 4usize],
    pub __bindgen_anon_1: cl_char4__bindgen_ty_1,
    pub __bindgen_anon_2: cl_char4__bindgen_ty_2,
    pub __bindgen_anon_3: cl_char4__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_char4__bindgen_ty_1 {
    pub x: cl_char,
    pub y: cl_char,
    pub z: cl_char,
    pub w: cl_char,
}
#[test]
fn bindgen_test_layout_cl_char4__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_char4__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_char4__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(cl_char4__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_char4__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_char4__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char4__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char4__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char4__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char4__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_char4__bindgen_ty_2 {
    pub s0: cl_char,
    pub s1: cl_char,
    pub s2: cl_char,
    pub s3: cl_char,
}
#[test]
fn bindgen_test_layout_cl_char4__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_char4__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_char4__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(cl_char4__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_char4__bindgen_ty_2>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_char4__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char4__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char4__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char4__bindgen_ty_2),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char4__bindgen_ty_2),
            "::",
            stringify!(s3)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cl_char4__bindgen_ty_3 {
    pub lo: cl_char2,
    pub hi: cl_char2,
}
#[test]
fn bindgen_test_layout_cl_char4__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_char4__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_char4__bindgen_ty_3>(),
        4usize,
        concat!("Size of: ", stringify!(cl_char4__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_char4__bindgen_ty_3>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_char4__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char4__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char4__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_char4() {
    const UNINIT: ::std::mem::MaybeUninit<cl_char4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_char4>(),
        4usize,
        concat!("Size of: ", stringify!(cl_char4))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_char4>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_char4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char4),
            "::",
            stringify!(s)
        )
    );
}
pub type cl_char3 = cl_char4;
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_char8 {
    pub s: [cl_char; 8usize],
    pub __bindgen_anon_1: cl_char8__bindgen_ty_1,
    pub __bindgen_anon_2: cl_char8__bindgen_ty_2,
    pub __bindgen_anon_3: cl_char8__bindgen_ty_3,
    pub v8: __cl_char8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_char8__bindgen_ty_1 {
    pub x: cl_char,
    pub y: cl_char,
    pub z: cl_char,
    pub w: cl_char,
}
#[test]
fn bindgen_test_layout_cl_char8__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_char8__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_char8__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(cl_char8__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_char8__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_char8__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char8__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char8__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char8__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char8__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_char8__bindgen_ty_2 {
    pub s0: cl_char,
    pub s1: cl_char,
    pub s2: cl_char,
    pub s3: cl_char,
    pub s4: cl_char,
    pub s5: cl_char,
    pub s6: cl_char,
    pub s7: cl_char,
}
#[test]
fn bindgen_test_layout_cl_char8__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_char8__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_char8__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(cl_char8__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_char8__bindgen_ty_2>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_char8__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char8__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char8__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char8__bindgen_ty_2),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char8__bindgen_ty_2),
            "::",
            stringify!(s3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char8__bindgen_ty_2),
            "::",
            stringify!(s4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char8__bindgen_ty_2),
            "::",
            stringify!(s5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char8__bindgen_ty_2),
            "::",
            stringify!(s6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char8__bindgen_ty_2),
            "::",
            stringify!(s7)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cl_char8__bindgen_ty_3 {
    pub lo: cl_char4,
    pub hi: cl_char4,
}
#[test]
fn bindgen_test_layout_cl_char8__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_char8__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_char8__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(cl_char8__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_char8__bindgen_ty_3>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_char8__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char8__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char8__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_char8() {
    const UNINIT: ::std::mem::MaybeUninit<cl_char8> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_char8>(),
        8usize,
        concat!("Size of: ", stringify!(cl_char8))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_char8>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_char8))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char8),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char8),
            "::",
            stringify!(v8)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_char16 {
    pub s: [cl_char; 16usize],
    pub __bindgen_anon_1: cl_char16__bindgen_ty_1,
    pub __bindgen_anon_2: cl_char16__bindgen_ty_2,
    pub __bindgen_anon_3: cl_char16__bindgen_ty_3,
    pub v8: [__cl_char8; 2usize],
    pub v16: __cl_char16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_char16__bindgen_ty_1 {
    pub x: cl_char,
    pub y: cl_char,
    pub z: cl_char,
    pub w: cl_char,
    pub __spacer4: cl_char,
    pub __spacer5: cl_char,
    pub __spacer6: cl_char,
    pub __spacer7: cl_char,
    pub __spacer8: cl_char,
    pub __spacer9: cl_char,
    pub sa: cl_char,
    pub sb: cl_char,
    pub sc: cl_char,
    pub sd: cl_char,
    pub se: cl_char,
    pub sf: cl_char,
}
#[test]
fn bindgen_test_layout_cl_char16__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_char16__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_char16__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(cl_char16__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_char16__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_char16__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer4) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16__bindgen_ty_1),
            "::",
            stringify!(__spacer4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer5) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16__bindgen_ty_1),
            "::",
            stringify!(__spacer5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer6) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16__bindgen_ty_1),
            "::",
            stringify!(__spacer6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer7) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16__bindgen_ty_1),
            "::",
            stringify!(__spacer7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer8) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16__bindgen_ty_1),
            "::",
            stringify!(__spacer8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer9) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16__bindgen_ty_1),
            "::",
            stringify!(__spacer9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16__bindgen_ty_1),
            "::",
            stringify!(sa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sb) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16__bindgen_ty_1),
            "::",
            stringify!(sb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sc) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16__bindgen_ty_1),
            "::",
            stringify!(sc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sd) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16__bindgen_ty_1),
            "::",
            stringify!(sd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).se) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16__bindgen_ty_1),
            "::",
            stringify!(se)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sf) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16__bindgen_ty_1),
            "::",
            stringify!(sf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_char16__bindgen_ty_2 {
    pub s0: cl_char,
    pub s1: cl_char,
    pub s2: cl_char,
    pub s3: cl_char,
    pub s4: cl_char,
    pub s5: cl_char,
    pub s6: cl_char,
    pub s7: cl_char,
    pub s8: cl_char,
    pub s9: cl_char,
    pub sA: cl_char,
    pub sB: cl_char,
    pub sC: cl_char,
    pub sD: cl_char,
    pub sE: cl_char,
    pub sF: cl_char,
}
#[test]
fn bindgen_test_layout_cl_char16__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_char16__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_char16__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(cl_char16__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_char16__bindgen_ty_2>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_char16__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16__bindgen_ty_2),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16__bindgen_ty_2),
            "::",
            stringify!(s3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16__bindgen_ty_2),
            "::",
            stringify!(s4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16__bindgen_ty_2),
            "::",
            stringify!(s5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16__bindgen_ty_2),
            "::",
            stringify!(s6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16__bindgen_ty_2),
            "::",
            stringify!(s7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s8) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16__bindgen_ty_2),
            "::",
            stringify!(s8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s9) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16__bindgen_ty_2),
            "::",
            stringify!(s9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sA) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16__bindgen_ty_2),
            "::",
            stringify!(sA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sB) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16__bindgen_ty_2),
            "::",
            stringify!(sB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sC) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16__bindgen_ty_2),
            "::",
            stringify!(sC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sD) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16__bindgen_ty_2),
            "::",
            stringify!(sD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sE) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16__bindgen_ty_2),
            "::",
            stringify!(sE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sF) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16__bindgen_ty_2),
            "::",
            stringify!(sF)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cl_char16__bindgen_ty_3 {
    pub lo: cl_char8,
    pub hi: cl_char8,
}
#[test]
fn bindgen_test_layout_cl_char16__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_char16__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_char16__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(cl_char16__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_char16__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_char16__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_char16() {
    const UNINIT: ::std::mem::MaybeUninit<cl_char16> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_char16>(),
        16usize,
        concat!("Size of: ", stringify!(cl_char16))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_char16>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_char16))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16),
            "::",
            stringify!(v8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_char16),
            "::",
            stringify!(v16)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_uchar2 {
    pub s: [cl_uchar; 2usize],
    pub __bindgen_anon_1: cl_uchar2__bindgen_ty_1,
    pub __bindgen_anon_2: cl_uchar2__bindgen_ty_2,
    pub __bindgen_anon_3: cl_uchar2__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_uchar2__bindgen_ty_1 {
    pub x: cl_uchar,
    pub y: cl_uchar,
}
#[test]
fn bindgen_test_layout_cl_uchar2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_uchar2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_uchar2__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(cl_uchar2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uchar2__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_uchar2__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar2__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar2__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_uchar2__bindgen_ty_2 {
    pub s0: cl_uchar,
    pub s1: cl_uchar,
}
#[test]
fn bindgen_test_layout_cl_uchar2__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_uchar2__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_uchar2__bindgen_ty_2>(),
        2usize,
        concat!("Size of: ", stringify!(cl_uchar2__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uchar2__bindgen_ty_2>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_uchar2__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar2__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar2__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_uchar2__bindgen_ty_3 {
    pub lo: cl_uchar,
    pub hi: cl_uchar,
}
#[test]
fn bindgen_test_layout_cl_uchar2__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_uchar2__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_uchar2__bindgen_ty_3>(),
        2usize,
        concat!("Size of: ", stringify!(cl_uchar2__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uchar2__bindgen_ty_3>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_uchar2__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar2__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar2__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_uchar2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_uchar2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_uchar2>(),
        2usize,
        concat!("Size of: ", stringify!(cl_uchar2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uchar2>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_uchar2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar2),
            "::",
            stringify!(s)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_uchar4 {
    pub s: [cl_uchar; 4usize],
    pub __bindgen_anon_1: cl_uchar4__bindgen_ty_1,
    pub __bindgen_anon_2: cl_uchar4__bindgen_ty_2,
    pub __bindgen_anon_3: cl_uchar4__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_uchar4__bindgen_ty_1 {
    pub x: cl_uchar,
    pub y: cl_uchar,
    pub z: cl_uchar,
    pub w: cl_uchar,
}
#[test]
fn bindgen_test_layout_cl_uchar4__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_uchar4__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_uchar4__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(cl_uchar4__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uchar4__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_uchar4__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar4__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar4__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar4__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar4__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_uchar4__bindgen_ty_2 {
    pub s0: cl_uchar,
    pub s1: cl_uchar,
    pub s2: cl_uchar,
    pub s3: cl_uchar,
}
#[test]
fn bindgen_test_layout_cl_uchar4__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_uchar4__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_uchar4__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(cl_uchar4__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uchar4__bindgen_ty_2>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_uchar4__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar4__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar4__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar4__bindgen_ty_2),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar4__bindgen_ty_2),
            "::",
            stringify!(s3)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cl_uchar4__bindgen_ty_3 {
    pub lo: cl_uchar2,
    pub hi: cl_uchar2,
}
#[test]
fn bindgen_test_layout_cl_uchar4__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_uchar4__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_uchar4__bindgen_ty_3>(),
        4usize,
        concat!("Size of: ", stringify!(cl_uchar4__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uchar4__bindgen_ty_3>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_uchar4__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar4__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar4__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_uchar4() {
    const UNINIT: ::std::mem::MaybeUninit<cl_uchar4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_uchar4>(),
        4usize,
        concat!("Size of: ", stringify!(cl_uchar4))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uchar4>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_uchar4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar4),
            "::",
            stringify!(s)
        )
    );
}
pub type cl_uchar3 = cl_uchar4;
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_uchar8 {
    pub s: [cl_uchar; 8usize],
    pub __bindgen_anon_1: cl_uchar8__bindgen_ty_1,
    pub __bindgen_anon_2: cl_uchar8__bindgen_ty_2,
    pub __bindgen_anon_3: cl_uchar8__bindgen_ty_3,
    pub v8: __cl_uchar8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_uchar8__bindgen_ty_1 {
    pub x: cl_uchar,
    pub y: cl_uchar,
    pub z: cl_uchar,
    pub w: cl_uchar,
}
#[test]
fn bindgen_test_layout_cl_uchar8__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_uchar8__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_uchar8__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(cl_uchar8__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uchar8__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_uchar8__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar8__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar8__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar8__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar8__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_uchar8__bindgen_ty_2 {
    pub s0: cl_uchar,
    pub s1: cl_uchar,
    pub s2: cl_uchar,
    pub s3: cl_uchar,
    pub s4: cl_uchar,
    pub s5: cl_uchar,
    pub s6: cl_uchar,
    pub s7: cl_uchar,
}
#[test]
fn bindgen_test_layout_cl_uchar8__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_uchar8__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_uchar8__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(cl_uchar8__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uchar8__bindgen_ty_2>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_uchar8__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar8__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar8__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar8__bindgen_ty_2),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar8__bindgen_ty_2),
            "::",
            stringify!(s3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar8__bindgen_ty_2),
            "::",
            stringify!(s4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar8__bindgen_ty_2),
            "::",
            stringify!(s5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar8__bindgen_ty_2),
            "::",
            stringify!(s6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar8__bindgen_ty_2),
            "::",
            stringify!(s7)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cl_uchar8__bindgen_ty_3 {
    pub lo: cl_uchar4,
    pub hi: cl_uchar4,
}
#[test]
fn bindgen_test_layout_cl_uchar8__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_uchar8__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_uchar8__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(cl_uchar8__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uchar8__bindgen_ty_3>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_uchar8__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar8__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar8__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_uchar8() {
    const UNINIT: ::std::mem::MaybeUninit<cl_uchar8> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_uchar8>(),
        8usize,
        concat!("Size of: ", stringify!(cl_uchar8))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uchar8>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_uchar8))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar8),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar8),
            "::",
            stringify!(v8)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_uchar16 {
    pub s: [cl_uchar; 16usize],
    pub __bindgen_anon_1: cl_uchar16__bindgen_ty_1,
    pub __bindgen_anon_2: cl_uchar16__bindgen_ty_2,
    pub __bindgen_anon_3: cl_uchar16__bindgen_ty_3,
    pub v8: [__cl_uchar8; 2usize],
    pub v16: __cl_uchar16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_uchar16__bindgen_ty_1 {
    pub x: cl_uchar,
    pub y: cl_uchar,
    pub z: cl_uchar,
    pub w: cl_uchar,
    pub __spacer4: cl_uchar,
    pub __spacer5: cl_uchar,
    pub __spacer6: cl_uchar,
    pub __spacer7: cl_uchar,
    pub __spacer8: cl_uchar,
    pub __spacer9: cl_uchar,
    pub sa: cl_uchar,
    pub sb: cl_uchar,
    pub sc: cl_uchar,
    pub sd: cl_uchar,
    pub se: cl_uchar,
    pub sf: cl_uchar,
}
#[test]
fn bindgen_test_layout_cl_uchar16__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_uchar16__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_uchar16__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(cl_uchar16__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uchar16__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_uchar16__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer4) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16__bindgen_ty_1),
            "::",
            stringify!(__spacer4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer5) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16__bindgen_ty_1),
            "::",
            stringify!(__spacer5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer6) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16__bindgen_ty_1),
            "::",
            stringify!(__spacer6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer7) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16__bindgen_ty_1),
            "::",
            stringify!(__spacer7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer8) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16__bindgen_ty_1),
            "::",
            stringify!(__spacer8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer9) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16__bindgen_ty_1),
            "::",
            stringify!(__spacer9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16__bindgen_ty_1),
            "::",
            stringify!(sa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sb) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16__bindgen_ty_1),
            "::",
            stringify!(sb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sc) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16__bindgen_ty_1),
            "::",
            stringify!(sc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sd) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16__bindgen_ty_1),
            "::",
            stringify!(sd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).se) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16__bindgen_ty_1),
            "::",
            stringify!(se)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sf) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16__bindgen_ty_1),
            "::",
            stringify!(sf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_uchar16__bindgen_ty_2 {
    pub s0: cl_uchar,
    pub s1: cl_uchar,
    pub s2: cl_uchar,
    pub s3: cl_uchar,
    pub s4: cl_uchar,
    pub s5: cl_uchar,
    pub s6: cl_uchar,
    pub s7: cl_uchar,
    pub s8: cl_uchar,
    pub s9: cl_uchar,
    pub sA: cl_uchar,
    pub sB: cl_uchar,
    pub sC: cl_uchar,
    pub sD: cl_uchar,
    pub sE: cl_uchar,
    pub sF: cl_uchar,
}
#[test]
fn bindgen_test_layout_cl_uchar16__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_uchar16__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_uchar16__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(cl_uchar16__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uchar16__bindgen_ty_2>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_uchar16__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16__bindgen_ty_2),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16__bindgen_ty_2),
            "::",
            stringify!(s3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16__bindgen_ty_2),
            "::",
            stringify!(s4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16__bindgen_ty_2),
            "::",
            stringify!(s5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16__bindgen_ty_2),
            "::",
            stringify!(s6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16__bindgen_ty_2),
            "::",
            stringify!(s7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s8) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16__bindgen_ty_2),
            "::",
            stringify!(s8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s9) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16__bindgen_ty_2),
            "::",
            stringify!(s9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sA) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16__bindgen_ty_2),
            "::",
            stringify!(sA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sB) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16__bindgen_ty_2),
            "::",
            stringify!(sB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sC) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16__bindgen_ty_2),
            "::",
            stringify!(sC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sD) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16__bindgen_ty_2),
            "::",
            stringify!(sD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sE) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16__bindgen_ty_2),
            "::",
            stringify!(sE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sF) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16__bindgen_ty_2),
            "::",
            stringify!(sF)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cl_uchar16__bindgen_ty_3 {
    pub lo: cl_uchar8,
    pub hi: cl_uchar8,
}
#[test]
fn bindgen_test_layout_cl_uchar16__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_uchar16__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_uchar16__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(cl_uchar16__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uchar16__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_uchar16__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_uchar16() {
    const UNINIT: ::std::mem::MaybeUninit<cl_uchar16> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_uchar16>(),
        16usize,
        concat!("Size of: ", stringify!(cl_uchar16))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uchar16>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_uchar16))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16),
            "::",
            stringify!(v8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uchar16),
            "::",
            stringify!(v16)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_short2 {
    pub s: [cl_short; 2usize],
    pub __bindgen_anon_1: cl_short2__bindgen_ty_1,
    pub __bindgen_anon_2: cl_short2__bindgen_ty_2,
    pub __bindgen_anon_3: cl_short2__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_short2__bindgen_ty_1 {
    pub x: cl_short,
    pub y: cl_short,
}
#[test]
fn bindgen_test_layout_cl_short2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_short2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_short2__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(cl_short2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_short2__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_short2__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short2__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short2__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_short2__bindgen_ty_2 {
    pub s0: cl_short,
    pub s1: cl_short,
}
#[test]
fn bindgen_test_layout_cl_short2__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_short2__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_short2__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(cl_short2__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_short2__bindgen_ty_2>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_short2__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short2__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short2__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_short2__bindgen_ty_3 {
    pub lo: cl_short,
    pub hi: cl_short,
}
#[test]
fn bindgen_test_layout_cl_short2__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_short2__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_short2__bindgen_ty_3>(),
        4usize,
        concat!("Size of: ", stringify!(cl_short2__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_short2__bindgen_ty_3>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_short2__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short2__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short2__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_short2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_short2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_short2>(),
        4usize,
        concat!("Size of: ", stringify!(cl_short2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_short2>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_short2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short2),
            "::",
            stringify!(s)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_short4 {
    pub s: [cl_short; 4usize],
    pub __bindgen_anon_1: cl_short4__bindgen_ty_1,
    pub __bindgen_anon_2: cl_short4__bindgen_ty_2,
    pub __bindgen_anon_3: cl_short4__bindgen_ty_3,
    pub v4: __cl_short4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_short4__bindgen_ty_1 {
    pub x: cl_short,
    pub y: cl_short,
    pub z: cl_short,
    pub w: cl_short,
}
#[test]
fn bindgen_test_layout_cl_short4__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_short4__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_short4__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(cl_short4__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_short4__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_short4__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short4__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short4__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short4__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short4__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_short4__bindgen_ty_2 {
    pub s0: cl_short,
    pub s1: cl_short,
    pub s2: cl_short,
    pub s3: cl_short,
}
#[test]
fn bindgen_test_layout_cl_short4__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_short4__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_short4__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(cl_short4__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_short4__bindgen_ty_2>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_short4__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short4__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short4__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short4__bindgen_ty_2),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short4__bindgen_ty_2),
            "::",
            stringify!(s3)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cl_short4__bindgen_ty_3 {
    pub lo: cl_short2,
    pub hi: cl_short2,
}
#[test]
fn bindgen_test_layout_cl_short4__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_short4__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_short4__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(cl_short4__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_short4__bindgen_ty_3>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_short4__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short4__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short4__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_short4() {
    const UNINIT: ::std::mem::MaybeUninit<cl_short4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_short4>(),
        8usize,
        concat!("Size of: ", stringify!(cl_short4))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_short4>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_short4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short4),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v4) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short4),
            "::",
            stringify!(v4)
        )
    );
}
pub type cl_short3 = cl_short4;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_short8 {
    pub s: [cl_short; 8usize],
    pub __bindgen_anon_1: cl_short8__bindgen_ty_1,
    pub __bindgen_anon_2: cl_short8__bindgen_ty_2,
    pub __bindgen_anon_3: cl_short8__bindgen_ty_3,
    pub v4: [__cl_short4; 2usize],
    pub v8: __cl_short8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_short8__bindgen_ty_1 {
    pub x: cl_short,
    pub y: cl_short,
    pub z: cl_short,
    pub w: cl_short,
}
#[test]
fn bindgen_test_layout_cl_short8__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_short8__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_short8__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(cl_short8__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_short8__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_short8__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short8__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short8__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short8__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short8__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_short8__bindgen_ty_2 {
    pub s0: cl_short,
    pub s1: cl_short,
    pub s2: cl_short,
    pub s3: cl_short,
    pub s4: cl_short,
    pub s5: cl_short,
    pub s6: cl_short,
    pub s7: cl_short,
}
#[test]
fn bindgen_test_layout_cl_short8__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_short8__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_short8__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(cl_short8__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_short8__bindgen_ty_2>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_short8__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short8__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short8__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short8__bindgen_ty_2),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short8__bindgen_ty_2),
            "::",
            stringify!(s3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short8__bindgen_ty_2),
            "::",
            stringify!(s4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short8__bindgen_ty_2),
            "::",
            stringify!(s5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short8__bindgen_ty_2),
            "::",
            stringify!(s6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short8__bindgen_ty_2),
            "::",
            stringify!(s7)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cl_short8__bindgen_ty_3 {
    pub lo: cl_short4,
    pub hi: cl_short4,
}
#[test]
fn bindgen_test_layout_cl_short8__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_short8__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_short8__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(cl_short8__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_short8__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_short8__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short8__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short8__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_short8() {
    const UNINIT: ::std::mem::MaybeUninit<cl_short8> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_short8>(),
        16usize,
        concat!("Size of: ", stringify!(cl_short8))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_short8>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_short8))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short8),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v4) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short8),
            "::",
            stringify!(v4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short8),
            "::",
            stringify!(v8)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_short16 {
    pub s: [cl_short; 16usize],
    pub __bindgen_anon_1: cl_short16__bindgen_ty_1,
    pub __bindgen_anon_2: cl_short16__bindgen_ty_2,
    pub __bindgen_anon_3: cl_short16__bindgen_ty_3,
    pub v4: [__cl_short4; 4usize],
    pub v8: [__cl_short8; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_short16__bindgen_ty_1 {
    pub x: cl_short,
    pub y: cl_short,
    pub z: cl_short,
    pub w: cl_short,
    pub __spacer4: cl_short,
    pub __spacer5: cl_short,
    pub __spacer6: cl_short,
    pub __spacer7: cl_short,
    pub __spacer8: cl_short,
    pub __spacer9: cl_short,
    pub sa: cl_short,
    pub sb: cl_short,
    pub sc: cl_short,
    pub sd: cl_short,
    pub se: cl_short,
    pub sf: cl_short,
}
#[test]
fn bindgen_test_layout_cl_short16__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_short16__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_short16__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(cl_short16__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_short16__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_short16__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer4) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16__bindgen_ty_1),
            "::",
            stringify!(__spacer4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer5) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16__bindgen_ty_1),
            "::",
            stringify!(__spacer5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer6) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16__bindgen_ty_1),
            "::",
            stringify!(__spacer6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer7) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16__bindgen_ty_1),
            "::",
            stringify!(__spacer7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer8) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16__bindgen_ty_1),
            "::",
            stringify!(__spacer8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer9) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16__bindgen_ty_1),
            "::",
            stringify!(__spacer9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16__bindgen_ty_1),
            "::",
            stringify!(sa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sb) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16__bindgen_ty_1),
            "::",
            stringify!(sb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sc) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16__bindgen_ty_1),
            "::",
            stringify!(sc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sd) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16__bindgen_ty_1),
            "::",
            stringify!(sd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).se) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16__bindgen_ty_1),
            "::",
            stringify!(se)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sf) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16__bindgen_ty_1),
            "::",
            stringify!(sf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_short16__bindgen_ty_2 {
    pub s0: cl_short,
    pub s1: cl_short,
    pub s2: cl_short,
    pub s3: cl_short,
    pub s4: cl_short,
    pub s5: cl_short,
    pub s6: cl_short,
    pub s7: cl_short,
    pub s8: cl_short,
    pub s9: cl_short,
    pub sA: cl_short,
    pub sB: cl_short,
    pub sC: cl_short,
    pub sD: cl_short,
    pub sE: cl_short,
    pub sF: cl_short,
}
#[test]
fn bindgen_test_layout_cl_short16__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_short16__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_short16__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(cl_short16__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_short16__bindgen_ty_2>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_short16__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16__bindgen_ty_2),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16__bindgen_ty_2),
            "::",
            stringify!(s3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16__bindgen_ty_2),
            "::",
            stringify!(s4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16__bindgen_ty_2),
            "::",
            stringify!(s5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16__bindgen_ty_2),
            "::",
            stringify!(s6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16__bindgen_ty_2),
            "::",
            stringify!(s7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s8) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16__bindgen_ty_2),
            "::",
            stringify!(s8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s9) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16__bindgen_ty_2),
            "::",
            stringify!(s9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sA) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16__bindgen_ty_2),
            "::",
            stringify!(sA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sB) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16__bindgen_ty_2),
            "::",
            stringify!(sB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sC) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16__bindgen_ty_2),
            "::",
            stringify!(sC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sD) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16__bindgen_ty_2),
            "::",
            stringify!(sD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sE) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16__bindgen_ty_2),
            "::",
            stringify!(sE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sF) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16__bindgen_ty_2),
            "::",
            stringify!(sF)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct cl_short16__bindgen_ty_3 {
    pub lo: cl_short8,
    pub hi: cl_short8,
}
#[test]
fn bindgen_test_layout_cl_short16__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_short16__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_short16__bindgen_ty_3>(),
        32usize,
        concat!("Size of: ", stringify!(cl_short16__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_short16__bindgen_ty_3>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_short16__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_short16() {
    const UNINIT: ::std::mem::MaybeUninit<cl_short16> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_short16>(),
        32usize,
        concat!("Size of: ", stringify!(cl_short16))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_short16>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_short16))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v4) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16),
            "::",
            stringify!(v4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_short16),
            "::",
            stringify!(v8)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_ushort2 {
    pub s: [cl_ushort; 2usize],
    pub __bindgen_anon_1: cl_ushort2__bindgen_ty_1,
    pub __bindgen_anon_2: cl_ushort2__bindgen_ty_2,
    pub __bindgen_anon_3: cl_ushort2__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_ushort2__bindgen_ty_1 {
    pub x: cl_ushort,
    pub y: cl_ushort,
}
#[test]
fn bindgen_test_layout_cl_ushort2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_ushort2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_ushort2__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(cl_ushort2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ushort2__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_ushort2__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort2__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort2__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_ushort2__bindgen_ty_2 {
    pub s0: cl_ushort,
    pub s1: cl_ushort,
}
#[test]
fn bindgen_test_layout_cl_ushort2__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_ushort2__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_ushort2__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(cl_ushort2__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ushort2__bindgen_ty_2>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_ushort2__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort2__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort2__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_ushort2__bindgen_ty_3 {
    pub lo: cl_ushort,
    pub hi: cl_ushort,
}
#[test]
fn bindgen_test_layout_cl_ushort2__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_ushort2__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_ushort2__bindgen_ty_3>(),
        4usize,
        concat!("Size of: ", stringify!(cl_ushort2__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ushort2__bindgen_ty_3>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_ushort2__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort2__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort2__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_ushort2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_ushort2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_ushort2>(),
        4usize,
        concat!("Size of: ", stringify!(cl_ushort2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ushort2>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_ushort2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort2),
            "::",
            stringify!(s)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_ushort4 {
    pub s: [cl_ushort; 4usize],
    pub __bindgen_anon_1: cl_ushort4__bindgen_ty_1,
    pub __bindgen_anon_2: cl_ushort4__bindgen_ty_2,
    pub __bindgen_anon_3: cl_ushort4__bindgen_ty_3,
    pub v4: __cl_ushort4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_ushort4__bindgen_ty_1 {
    pub x: cl_ushort,
    pub y: cl_ushort,
    pub z: cl_ushort,
    pub w: cl_ushort,
}
#[test]
fn bindgen_test_layout_cl_ushort4__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_ushort4__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_ushort4__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(cl_ushort4__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ushort4__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_ushort4__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort4__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort4__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort4__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort4__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_ushort4__bindgen_ty_2 {
    pub s0: cl_ushort,
    pub s1: cl_ushort,
    pub s2: cl_ushort,
    pub s3: cl_ushort,
}
#[test]
fn bindgen_test_layout_cl_ushort4__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_ushort4__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_ushort4__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(cl_ushort4__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ushort4__bindgen_ty_2>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_ushort4__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort4__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort4__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort4__bindgen_ty_2),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort4__bindgen_ty_2),
            "::",
            stringify!(s3)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cl_ushort4__bindgen_ty_3 {
    pub lo: cl_ushort2,
    pub hi: cl_ushort2,
}
#[test]
fn bindgen_test_layout_cl_ushort4__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_ushort4__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_ushort4__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(cl_ushort4__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ushort4__bindgen_ty_3>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_ushort4__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort4__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort4__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_ushort4() {
    const UNINIT: ::std::mem::MaybeUninit<cl_ushort4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_ushort4>(),
        8usize,
        concat!("Size of: ", stringify!(cl_ushort4))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ushort4>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_ushort4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort4),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v4) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort4),
            "::",
            stringify!(v4)
        )
    );
}
pub type cl_ushort3 = cl_ushort4;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_ushort8 {
    pub s: [cl_ushort; 8usize],
    pub __bindgen_anon_1: cl_ushort8__bindgen_ty_1,
    pub __bindgen_anon_2: cl_ushort8__bindgen_ty_2,
    pub __bindgen_anon_3: cl_ushort8__bindgen_ty_3,
    pub v4: [__cl_ushort4; 2usize],
    pub v8: __cl_ushort8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_ushort8__bindgen_ty_1 {
    pub x: cl_ushort,
    pub y: cl_ushort,
    pub z: cl_ushort,
    pub w: cl_ushort,
}
#[test]
fn bindgen_test_layout_cl_ushort8__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_ushort8__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_ushort8__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(cl_ushort8__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ushort8__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_ushort8__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort8__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort8__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort8__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort8__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_ushort8__bindgen_ty_2 {
    pub s0: cl_ushort,
    pub s1: cl_ushort,
    pub s2: cl_ushort,
    pub s3: cl_ushort,
    pub s4: cl_ushort,
    pub s5: cl_ushort,
    pub s6: cl_ushort,
    pub s7: cl_ushort,
}
#[test]
fn bindgen_test_layout_cl_ushort8__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_ushort8__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_ushort8__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(cl_ushort8__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ushort8__bindgen_ty_2>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_ushort8__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort8__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort8__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort8__bindgen_ty_2),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort8__bindgen_ty_2),
            "::",
            stringify!(s3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort8__bindgen_ty_2),
            "::",
            stringify!(s4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort8__bindgen_ty_2),
            "::",
            stringify!(s5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort8__bindgen_ty_2),
            "::",
            stringify!(s6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort8__bindgen_ty_2),
            "::",
            stringify!(s7)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cl_ushort8__bindgen_ty_3 {
    pub lo: cl_ushort4,
    pub hi: cl_ushort4,
}
#[test]
fn bindgen_test_layout_cl_ushort8__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_ushort8__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_ushort8__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(cl_ushort8__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ushort8__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_ushort8__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort8__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort8__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_ushort8() {
    const UNINIT: ::std::mem::MaybeUninit<cl_ushort8> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_ushort8>(),
        16usize,
        concat!("Size of: ", stringify!(cl_ushort8))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ushort8>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_ushort8))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort8),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v4) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort8),
            "::",
            stringify!(v4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort8),
            "::",
            stringify!(v8)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_ushort16 {
    pub s: [cl_ushort; 16usize],
    pub __bindgen_anon_1: cl_ushort16__bindgen_ty_1,
    pub __bindgen_anon_2: cl_ushort16__bindgen_ty_2,
    pub __bindgen_anon_3: cl_ushort16__bindgen_ty_3,
    pub v4: [__cl_ushort4; 4usize],
    pub v8: [__cl_ushort8; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_ushort16__bindgen_ty_1 {
    pub x: cl_ushort,
    pub y: cl_ushort,
    pub z: cl_ushort,
    pub w: cl_ushort,
    pub __spacer4: cl_ushort,
    pub __spacer5: cl_ushort,
    pub __spacer6: cl_ushort,
    pub __spacer7: cl_ushort,
    pub __spacer8: cl_ushort,
    pub __spacer9: cl_ushort,
    pub sa: cl_ushort,
    pub sb: cl_ushort,
    pub sc: cl_ushort,
    pub sd: cl_ushort,
    pub se: cl_ushort,
    pub sf: cl_ushort,
}
#[test]
fn bindgen_test_layout_cl_ushort16__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_ushort16__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_ushort16__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(cl_ushort16__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ushort16__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_ushort16__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer4) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16__bindgen_ty_1),
            "::",
            stringify!(__spacer4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer5) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16__bindgen_ty_1),
            "::",
            stringify!(__spacer5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer6) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16__bindgen_ty_1),
            "::",
            stringify!(__spacer6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer7) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16__bindgen_ty_1),
            "::",
            stringify!(__spacer7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer8) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16__bindgen_ty_1),
            "::",
            stringify!(__spacer8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer9) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16__bindgen_ty_1),
            "::",
            stringify!(__spacer9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16__bindgen_ty_1),
            "::",
            stringify!(sa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sb) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16__bindgen_ty_1),
            "::",
            stringify!(sb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sc) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16__bindgen_ty_1),
            "::",
            stringify!(sc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sd) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16__bindgen_ty_1),
            "::",
            stringify!(sd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).se) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16__bindgen_ty_1),
            "::",
            stringify!(se)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sf) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16__bindgen_ty_1),
            "::",
            stringify!(sf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_ushort16__bindgen_ty_2 {
    pub s0: cl_ushort,
    pub s1: cl_ushort,
    pub s2: cl_ushort,
    pub s3: cl_ushort,
    pub s4: cl_ushort,
    pub s5: cl_ushort,
    pub s6: cl_ushort,
    pub s7: cl_ushort,
    pub s8: cl_ushort,
    pub s9: cl_ushort,
    pub sA: cl_ushort,
    pub sB: cl_ushort,
    pub sC: cl_ushort,
    pub sD: cl_ushort,
    pub sE: cl_ushort,
    pub sF: cl_ushort,
}
#[test]
fn bindgen_test_layout_cl_ushort16__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_ushort16__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_ushort16__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(cl_ushort16__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ushort16__bindgen_ty_2>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_ushort16__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16__bindgen_ty_2),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16__bindgen_ty_2),
            "::",
            stringify!(s3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16__bindgen_ty_2),
            "::",
            stringify!(s4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16__bindgen_ty_2),
            "::",
            stringify!(s5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16__bindgen_ty_2),
            "::",
            stringify!(s6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16__bindgen_ty_2),
            "::",
            stringify!(s7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s8) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16__bindgen_ty_2),
            "::",
            stringify!(s8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s9) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16__bindgen_ty_2),
            "::",
            stringify!(s9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sA) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16__bindgen_ty_2),
            "::",
            stringify!(sA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sB) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16__bindgen_ty_2),
            "::",
            stringify!(sB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sC) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16__bindgen_ty_2),
            "::",
            stringify!(sC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sD) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16__bindgen_ty_2),
            "::",
            stringify!(sD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sE) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16__bindgen_ty_2),
            "::",
            stringify!(sE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sF) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16__bindgen_ty_2),
            "::",
            stringify!(sF)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct cl_ushort16__bindgen_ty_3 {
    pub lo: cl_ushort8,
    pub hi: cl_ushort8,
}
#[test]
fn bindgen_test_layout_cl_ushort16__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_ushort16__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_ushort16__bindgen_ty_3>(),
        32usize,
        concat!("Size of: ", stringify!(cl_ushort16__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ushort16__bindgen_ty_3>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_ushort16__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_ushort16() {
    const UNINIT: ::std::mem::MaybeUninit<cl_ushort16> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_ushort16>(),
        32usize,
        concat!("Size of: ", stringify!(cl_ushort16))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ushort16>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_ushort16))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v4) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16),
            "::",
            stringify!(v4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ushort16),
            "::",
            stringify!(v8)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_half2 {
    pub s: [cl_half; 2usize],
    pub __bindgen_anon_1: cl_half2__bindgen_ty_1,
    pub __bindgen_anon_2: cl_half2__bindgen_ty_2,
    pub __bindgen_anon_3: cl_half2__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_half2__bindgen_ty_1 {
    pub x: cl_half,
    pub y: cl_half,
}
#[test]
fn bindgen_test_layout_cl_half2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_half2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_half2__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(cl_half2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_half2__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_half2__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half2__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half2__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_half2__bindgen_ty_2 {
    pub s0: cl_half,
    pub s1: cl_half,
}
#[test]
fn bindgen_test_layout_cl_half2__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_half2__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_half2__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(cl_half2__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_half2__bindgen_ty_2>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_half2__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half2__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half2__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_half2__bindgen_ty_3 {
    pub lo: cl_half,
    pub hi: cl_half,
}
#[test]
fn bindgen_test_layout_cl_half2__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_half2__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_half2__bindgen_ty_3>(),
        4usize,
        concat!("Size of: ", stringify!(cl_half2__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_half2__bindgen_ty_3>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_half2__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half2__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half2__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_half2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_half2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_half2>(),
        4usize,
        concat!("Size of: ", stringify!(cl_half2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_half2>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_half2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half2),
            "::",
            stringify!(s)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_half4 {
    pub s: [cl_half; 4usize],
    pub __bindgen_anon_1: cl_half4__bindgen_ty_1,
    pub __bindgen_anon_2: cl_half4__bindgen_ty_2,
    pub __bindgen_anon_3: cl_half4__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_half4__bindgen_ty_1 {
    pub x: cl_half,
    pub y: cl_half,
    pub z: cl_half,
    pub w: cl_half,
}
#[test]
fn bindgen_test_layout_cl_half4__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_half4__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_half4__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(cl_half4__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_half4__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_half4__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half4__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half4__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half4__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half4__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_half4__bindgen_ty_2 {
    pub s0: cl_half,
    pub s1: cl_half,
    pub s2: cl_half,
    pub s3: cl_half,
}
#[test]
fn bindgen_test_layout_cl_half4__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_half4__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_half4__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(cl_half4__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_half4__bindgen_ty_2>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_half4__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half4__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half4__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half4__bindgen_ty_2),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half4__bindgen_ty_2),
            "::",
            stringify!(s3)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cl_half4__bindgen_ty_3 {
    pub lo: cl_half2,
    pub hi: cl_half2,
}
#[test]
fn bindgen_test_layout_cl_half4__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_half4__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_half4__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(cl_half4__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_half4__bindgen_ty_3>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_half4__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half4__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half4__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_half4() {
    const UNINIT: ::std::mem::MaybeUninit<cl_half4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_half4>(),
        8usize,
        concat!("Size of: ", stringify!(cl_half4))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_half4>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_half4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half4),
            "::",
            stringify!(s)
        )
    );
}
pub type cl_half3 = cl_half4;
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_half8 {
    pub s: [cl_half; 8usize],
    pub __bindgen_anon_1: cl_half8__bindgen_ty_1,
    pub __bindgen_anon_2: cl_half8__bindgen_ty_2,
    pub __bindgen_anon_3: cl_half8__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_half8__bindgen_ty_1 {
    pub x: cl_half,
    pub y: cl_half,
    pub z: cl_half,
    pub w: cl_half,
}
#[test]
fn bindgen_test_layout_cl_half8__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_half8__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_half8__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(cl_half8__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_half8__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_half8__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half8__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half8__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half8__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half8__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_half8__bindgen_ty_2 {
    pub s0: cl_half,
    pub s1: cl_half,
    pub s2: cl_half,
    pub s3: cl_half,
    pub s4: cl_half,
    pub s5: cl_half,
    pub s6: cl_half,
    pub s7: cl_half,
}
#[test]
fn bindgen_test_layout_cl_half8__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_half8__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_half8__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(cl_half8__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_half8__bindgen_ty_2>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_half8__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half8__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half8__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half8__bindgen_ty_2),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half8__bindgen_ty_2),
            "::",
            stringify!(s3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half8__bindgen_ty_2),
            "::",
            stringify!(s4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half8__bindgen_ty_2),
            "::",
            stringify!(s5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half8__bindgen_ty_2),
            "::",
            stringify!(s6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half8__bindgen_ty_2),
            "::",
            stringify!(s7)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cl_half8__bindgen_ty_3 {
    pub lo: cl_half4,
    pub hi: cl_half4,
}
#[test]
fn bindgen_test_layout_cl_half8__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_half8__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_half8__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(cl_half8__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_half8__bindgen_ty_3>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_half8__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half8__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half8__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_half8() {
    const UNINIT: ::std::mem::MaybeUninit<cl_half8> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_half8>(),
        16usize,
        concat!("Size of: ", stringify!(cl_half8))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_half8>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_half8))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half8),
            "::",
            stringify!(s)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_half16 {
    pub s: [cl_half; 16usize],
    pub __bindgen_anon_1: cl_half16__bindgen_ty_1,
    pub __bindgen_anon_2: cl_half16__bindgen_ty_2,
    pub __bindgen_anon_3: cl_half16__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_half16__bindgen_ty_1 {
    pub x: cl_half,
    pub y: cl_half,
    pub z: cl_half,
    pub w: cl_half,
    pub __spacer4: cl_half,
    pub __spacer5: cl_half,
    pub __spacer6: cl_half,
    pub __spacer7: cl_half,
    pub __spacer8: cl_half,
    pub __spacer9: cl_half,
    pub sa: cl_half,
    pub sb: cl_half,
    pub sc: cl_half,
    pub sd: cl_half,
    pub se: cl_half,
    pub sf: cl_half,
}
#[test]
fn bindgen_test_layout_cl_half16__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_half16__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_half16__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(cl_half16__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_half16__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_half16__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half16__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half16__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half16__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half16__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer4) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half16__bindgen_ty_1),
            "::",
            stringify!(__spacer4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer5) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half16__bindgen_ty_1),
            "::",
            stringify!(__spacer5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer6) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half16__bindgen_ty_1),
            "::",
            stringify!(__spacer6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer7) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half16__bindgen_ty_1),
            "::",
            stringify!(__spacer7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer8) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half16__bindgen_ty_1),
            "::",
            stringify!(__spacer8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer9) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half16__bindgen_ty_1),
            "::",
            stringify!(__spacer9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half16__bindgen_ty_1),
            "::",
            stringify!(sa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sb) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half16__bindgen_ty_1),
            "::",
            stringify!(sb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sc) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half16__bindgen_ty_1),
            "::",
            stringify!(sc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sd) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half16__bindgen_ty_1),
            "::",
            stringify!(sd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).se) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half16__bindgen_ty_1),
            "::",
            stringify!(se)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sf) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half16__bindgen_ty_1),
            "::",
            stringify!(sf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_half16__bindgen_ty_2 {
    pub s0: cl_half,
    pub s1: cl_half,
    pub s2: cl_half,
    pub s3: cl_half,
    pub s4: cl_half,
    pub s5: cl_half,
    pub s6: cl_half,
    pub s7: cl_half,
    pub s8: cl_half,
    pub s9: cl_half,
    pub sA: cl_half,
    pub sB: cl_half,
    pub sC: cl_half,
    pub sD: cl_half,
    pub sE: cl_half,
    pub sF: cl_half,
}
#[test]
fn bindgen_test_layout_cl_half16__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_half16__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_half16__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(cl_half16__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_half16__bindgen_ty_2>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_half16__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half16__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half16__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half16__bindgen_ty_2),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half16__bindgen_ty_2),
            "::",
            stringify!(s3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half16__bindgen_ty_2),
            "::",
            stringify!(s4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half16__bindgen_ty_2),
            "::",
            stringify!(s5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half16__bindgen_ty_2),
            "::",
            stringify!(s6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half16__bindgen_ty_2),
            "::",
            stringify!(s7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s8) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half16__bindgen_ty_2),
            "::",
            stringify!(s8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s9) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half16__bindgen_ty_2),
            "::",
            stringify!(s9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sA) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half16__bindgen_ty_2),
            "::",
            stringify!(sA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sB) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half16__bindgen_ty_2),
            "::",
            stringify!(sB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sC) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half16__bindgen_ty_2),
            "::",
            stringify!(sC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sD) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half16__bindgen_ty_2),
            "::",
            stringify!(sD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sE) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half16__bindgen_ty_2),
            "::",
            stringify!(sE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sF) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half16__bindgen_ty_2),
            "::",
            stringify!(sF)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cl_half16__bindgen_ty_3 {
    pub lo: cl_half8,
    pub hi: cl_half8,
}
#[test]
fn bindgen_test_layout_cl_half16__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_half16__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_half16__bindgen_ty_3>(),
        32usize,
        concat!("Size of: ", stringify!(cl_half16__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_half16__bindgen_ty_3>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_half16__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half16__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half16__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_half16() {
    const UNINIT: ::std::mem::MaybeUninit<cl_half16> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_half16>(),
        32usize,
        concat!("Size of: ", stringify!(cl_half16))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_half16>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_half16))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_half16),
            "::",
            stringify!(s)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_int2 {
    pub s: [cl_int; 2usize],
    pub __bindgen_anon_1: cl_int2__bindgen_ty_1,
    pub __bindgen_anon_2: cl_int2__bindgen_ty_2,
    pub __bindgen_anon_3: cl_int2__bindgen_ty_3,
    pub v2: __cl_int2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_int2__bindgen_ty_1 {
    pub x: cl_int,
    pub y: cl_int,
}
#[test]
fn bindgen_test_layout_cl_int2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_int2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_int2__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(cl_int2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_int2__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_int2__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int2__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int2__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_int2__bindgen_ty_2 {
    pub s0: cl_int,
    pub s1: cl_int,
}
#[test]
fn bindgen_test_layout_cl_int2__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_int2__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_int2__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(cl_int2__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_int2__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_int2__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int2__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int2__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_int2__bindgen_ty_3 {
    pub lo: cl_int,
    pub hi: cl_int,
}
#[test]
fn bindgen_test_layout_cl_int2__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_int2__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_int2__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(cl_int2__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_int2__bindgen_ty_3>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_int2__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int2__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int2__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_int2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_int2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_int2>(),
        8usize,
        concat!("Size of: ", stringify!(cl_int2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_int2>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_int2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int2),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int2),
            "::",
            stringify!(v2)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_int4 {
    pub s: [cl_int; 4usize],
    pub __bindgen_anon_1: cl_int4__bindgen_ty_1,
    pub __bindgen_anon_2: cl_int4__bindgen_ty_2,
    pub __bindgen_anon_3: cl_int4__bindgen_ty_3,
    pub v2: [__cl_int2; 2usize],
    pub v4: __cl_int4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_int4__bindgen_ty_1 {
    pub x: cl_int,
    pub y: cl_int,
    pub z: cl_int,
    pub w: cl_int,
}
#[test]
fn bindgen_test_layout_cl_int4__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_int4__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_int4__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(cl_int4__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_int4__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_int4__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int4__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int4__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int4__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int4__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_int4__bindgen_ty_2 {
    pub s0: cl_int,
    pub s1: cl_int,
    pub s2: cl_int,
    pub s3: cl_int,
}
#[test]
fn bindgen_test_layout_cl_int4__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_int4__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_int4__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(cl_int4__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_int4__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_int4__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int4__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int4__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int4__bindgen_ty_2),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int4__bindgen_ty_2),
            "::",
            stringify!(s3)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cl_int4__bindgen_ty_3 {
    pub lo: cl_int2,
    pub hi: cl_int2,
}
#[test]
fn bindgen_test_layout_cl_int4__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_int4__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_int4__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(cl_int4__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_int4__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_int4__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int4__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int4__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_int4() {
    const UNINIT: ::std::mem::MaybeUninit<cl_int4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_int4>(),
        16usize,
        concat!("Size of: ", stringify!(cl_int4))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_int4>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_int4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int4),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int4),
            "::",
            stringify!(v2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v4) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int4),
            "::",
            stringify!(v4)
        )
    );
}
pub type cl_int3 = cl_int4;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_int8 {
    pub s: [cl_int; 8usize],
    pub __bindgen_anon_1: cl_int8__bindgen_ty_1,
    pub __bindgen_anon_2: cl_int8__bindgen_ty_2,
    pub __bindgen_anon_3: cl_int8__bindgen_ty_3,
    pub v2: [__cl_int2; 4usize],
    pub v4: [__cl_int4; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_int8__bindgen_ty_1 {
    pub x: cl_int,
    pub y: cl_int,
    pub z: cl_int,
    pub w: cl_int,
}
#[test]
fn bindgen_test_layout_cl_int8__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_int8__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_int8__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(cl_int8__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_int8__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_int8__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int8__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int8__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int8__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int8__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_int8__bindgen_ty_2 {
    pub s0: cl_int,
    pub s1: cl_int,
    pub s2: cl_int,
    pub s3: cl_int,
    pub s4: cl_int,
    pub s5: cl_int,
    pub s6: cl_int,
    pub s7: cl_int,
}
#[test]
fn bindgen_test_layout_cl_int8__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_int8__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_int8__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(cl_int8__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_int8__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_int8__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int8__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int8__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int8__bindgen_ty_2),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int8__bindgen_ty_2),
            "::",
            stringify!(s3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int8__bindgen_ty_2),
            "::",
            stringify!(s4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int8__bindgen_ty_2),
            "::",
            stringify!(s5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int8__bindgen_ty_2),
            "::",
            stringify!(s6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int8__bindgen_ty_2),
            "::",
            stringify!(s7)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct cl_int8__bindgen_ty_3 {
    pub lo: cl_int4,
    pub hi: cl_int4,
}
#[test]
fn bindgen_test_layout_cl_int8__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_int8__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_int8__bindgen_ty_3>(),
        32usize,
        concat!("Size of: ", stringify!(cl_int8__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_int8__bindgen_ty_3>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_int8__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int8__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int8__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_int8() {
    const UNINIT: ::std::mem::MaybeUninit<cl_int8> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_int8>(),
        32usize,
        concat!("Size of: ", stringify!(cl_int8))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_int8>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_int8))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int8),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int8),
            "::",
            stringify!(v2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v4) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int8),
            "::",
            stringify!(v4)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_int16 {
    pub s: [cl_int; 16usize],
    pub __bindgen_anon_1: cl_int16__bindgen_ty_1,
    pub __bindgen_anon_2: cl_int16__bindgen_ty_2,
    pub __bindgen_anon_3: cl_int16__bindgen_ty_3,
    pub v2: [__cl_int2; 8usize],
    pub v4: [__cl_int4; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_int16__bindgen_ty_1 {
    pub x: cl_int,
    pub y: cl_int,
    pub z: cl_int,
    pub w: cl_int,
    pub __spacer4: cl_int,
    pub __spacer5: cl_int,
    pub __spacer6: cl_int,
    pub __spacer7: cl_int,
    pub __spacer8: cl_int,
    pub __spacer9: cl_int,
    pub sa: cl_int,
    pub sb: cl_int,
    pub sc: cl_int,
    pub sd: cl_int,
    pub se: cl_int,
    pub sf: cl_int,
}
#[test]
fn bindgen_test_layout_cl_int16__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_int16__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_int16__bindgen_ty_1>(),
        64usize,
        concat!("Size of: ", stringify!(cl_int16__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_int16__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_int16__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer4) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16__bindgen_ty_1),
            "::",
            stringify!(__spacer4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer5) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16__bindgen_ty_1),
            "::",
            stringify!(__spacer5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer6) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16__bindgen_ty_1),
            "::",
            stringify!(__spacer6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer7) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16__bindgen_ty_1),
            "::",
            stringify!(__spacer7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer8) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16__bindgen_ty_1),
            "::",
            stringify!(__spacer8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer9) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16__bindgen_ty_1),
            "::",
            stringify!(__spacer9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16__bindgen_ty_1),
            "::",
            stringify!(sa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sb) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16__bindgen_ty_1),
            "::",
            stringify!(sb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sc) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16__bindgen_ty_1),
            "::",
            stringify!(sc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sd) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16__bindgen_ty_1),
            "::",
            stringify!(sd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).se) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16__bindgen_ty_1),
            "::",
            stringify!(se)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sf) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16__bindgen_ty_1),
            "::",
            stringify!(sf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_int16__bindgen_ty_2 {
    pub s0: cl_int,
    pub s1: cl_int,
    pub s2: cl_int,
    pub s3: cl_int,
    pub s4: cl_int,
    pub s5: cl_int,
    pub s6: cl_int,
    pub s7: cl_int,
    pub s8: cl_int,
    pub s9: cl_int,
    pub sA: cl_int,
    pub sB: cl_int,
    pub sC: cl_int,
    pub sD: cl_int,
    pub sE: cl_int,
    pub sF: cl_int,
}
#[test]
fn bindgen_test_layout_cl_int16__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_int16__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_int16__bindgen_ty_2>(),
        64usize,
        concat!("Size of: ", stringify!(cl_int16__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_int16__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_int16__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16__bindgen_ty_2),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16__bindgen_ty_2),
            "::",
            stringify!(s3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16__bindgen_ty_2),
            "::",
            stringify!(s4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16__bindgen_ty_2),
            "::",
            stringify!(s5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16__bindgen_ty_2),
            "::",
            stringify!(s6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16__bindgen_ty_2),
            "::",
            stringify!(s7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s8) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16__bindgen_ty_2),
            "::",
            stringify!(s8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s9) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16__bindgen_ty_2),
            "::",
            stringify!(s9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sA) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16__bindgen_ty_2),
            "::",
            stringify!(sA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sB) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16__bindgen_ty_2),
            "::",
            stringify!(sB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sC) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16__bindgen_ty_2),
            "::",
            stringify!(sC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sD) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16__bindgen_ty_2),
            "::",
            stringify!(sD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sE) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16__bindgen_ty_2),
            "::",
            stringify!(sE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sF) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16__bindgen_ty_2),
            "::",
            stringify!(sF)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct cl_int16__bindgen_ty_3 {
    pub lo: cl_int8,
    pub hi: cl_int8,
}
#[test]
fn bindgen_test_layout_cl_int16__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_int16__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_int16__bindgen_ty_3>(),
        64usize,
        concat!("Size of: ", stringify!(cl_int16__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_int16__bindgen_ty_3>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_int16__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_int16() {
    const UNINIT: ::std::mem::MaybeUninit<cl_int16> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_int16>(),
        64usize,
        concat!("Size of: ", stringify!(cl_int16))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_int16>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_int16))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16),
            "::",
            stringify!(v2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v4) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_int16),
            "::",
            stringify!(v4)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_uint2 {
    pub s: [cl_uint; 2usize],
    pub __bindgen_anon_1: cl_uint2__bindgen_ty_1,
    pub __bindgen_anon_2: cl_uint2__bindgen_ty_2,
    pub __bindgen_anon_3: cl_uint2__bindgen_ty_3,
    pub v2: __cl_uint2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_uint2__bindgen_ty_1 {
    pub x: cl_uint,
    pub y: cl_uint,
}
#[test]
fn bindgen_test_layout_cl_uint2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_uint2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_uint2__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(cl_uint2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uint2__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_uint2__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint2__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint2__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_uint2__bindgen_ty_2 {
    pub s0: cl_uint,
    pub s1: cl_uint,
}
#[test]
fn bindgen_test_layout_cl_uint2__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_uint2__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_uint2__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(cl_uint2__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uint2__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_uint2__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint2__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint2__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_uint2__bindgen_ty_3 {
    pub lo: cl_uint,
    pub hi: cl_uint,
}
#[test]
fn bindgen_test_layout_cl_uint2__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_uint2__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_uint2__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(cl_uint2__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uint2__bindgen_ty_3>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_uint2__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint2__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint2__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_uint2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_uint2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_uint2>(),
        8usize,
        concat!("Size of: ", stringify!(cl_uint2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uint2>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_uint2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint2),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint2),
            "::",
            stringify!(v2)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_uint4 {
    pub s: [cl_uint; 4usize],
    pub __bindgen_anon_1: cl_uint4__bindgen_ty_1,
    pub __bindgen_anon_2: cl_uint4__bindgen_ty_2,
    pub __bindgen_anon_3: cl_uint4__bindgen_ty_3,
    pub v2: [__cl_uint2; 2usize],
    pub v4: __cl_uint4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_uint4__bindgen_ty_1 {
    pub x: cl_uint,
    pub y: cl_uint,
    pub z: cl_uint,
    pub w: cl_uint,
}
#[test]
fn bindgen_test_layout_cl_uint4__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_uint4__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_uint4__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(cl_uint4__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uint4__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_uint4__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint4__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint4__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint4__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint4__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_uint4__bindgen_ty_2 {
    pub s0: cl_uint,
    pub s1: cl_uint,
    pub s2: cl_uint,
    pub s3: cl_uint,
}
#[test]
fn bindgen_test_layout_cl_uint4__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_uint4__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_uint4__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(cl_uint4__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uint4__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_uint4__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint4__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint4__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint4__bindgen_ty_2),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint4__bindgen_ty_2),
            "::",
            stringify!(s3)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cl_uint4__bindgen_ty_3 {
    pub lo: cl_uint2,
    pub hi: cl_uint2,
}
#[test]
fn bindgen_test_layout_cl_uint4__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_uint4__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_uint4__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(cl_uint4__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uint4__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_uint4__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint4__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint4__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_uint4() {
    const UNINIT: ::std::mem::MaybeUninit<cl_uint4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_uint4>(),
        16usize,
        concat!("Size of: ", stringify!(cl_uint4))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uint4>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_uint4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint4),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint4),
            "::",
            stringify!(v2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v4) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint4),
            "::",
            stringify!(v4)
        )
    );
}
pub type cl_uint3 = cl_uint4;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_uint8 {
    pub s: [cl_uint; 8usize],
    pub __bindgen_anon_1: cl_uint8__bindgen_ty_1,
    pub __bindgen_anon_2: cl_uint8__bindgen_ty_2,
    pub __bindgen_anon_3: cl_uint8__bindgen_ty_3,
    pub v2: [__cl_uint2; 4usize],
    pub v4: [__cl_uint4; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_uint8__bindgen_ty_1 {
    pub x: cl_uint,
    pub y: cl_uint,
    pub z: cl_uint,
    pub w: cl_uint,
}
#[test]
fn bindgen_test_layout_cl_uint8__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_uint8__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_uint8__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(cl_uint8__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uint8__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_uint8__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint8__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint8__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint8__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint8__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_uint8__bindgen_ty_2 {
    pub s0: cl_uint,
    pub s1: cl_uint,
    pub s2: cl_uint,
    pub s3: cl_uint,
    pub s4: cl_uint,
    pub s5: cl_uint,
    pub s6: cl_uint,
    pub s7: cl_uint,
}
#[test]
fn bindgen_test_layout_cl_uint8__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_uint8__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_uint8__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(cl_uint8__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uint8__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_uint8__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint8__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint8__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint8__bindgen_ty_2),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint8__bindgen_ty_2),
            "::",
            stringify!(s3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint8__bindgen_ty_2),
            "::",
            stringify!(s4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint8__bindgen_ty_2),
            "::",
            stringify!(s5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint8__bindgen_ty_2),
            "::",
            stringify!(s6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint8__bindgen_ty_2),
            "::",
            stringify!(s7)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct cl_uint8__bindgen_ty_3 {
    pub lo: cl_uint4,
    pub hi: cl_uint4,
}
#[test]
fn bindgen_test_layout_cl_uint8__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_uint8__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_uint8__bindgen_ty_3>(),
        32usize,
        concat!("Size of: ", stringify!(cl_uint8__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uint8__bindgen_ty_3>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_uint8__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint8__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint8__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_uint8() {
    const UNINIT: ::std::mem::MaybeUninit<cl_uint8> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_uint8>(),
        32usize,
        concat!("Size of: ", stringify!(cl_uint8))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uint8>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_uint8))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint8),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint8),
            "::",
            stringify!(v2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v4) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint8),
            "::",
            stringify!(v4)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_uint16 {
    pub s: [cl_uint; 16usize],
    pub __bindgen_anon_1: cl_uint16__bindgen_ty_1,
    pub __bindgen_anon_2: cl_uint16__bindgen_ty_2,
    pub __bindgen_anon_3: cl_uint16__bindgen_ty_3,
    pub v2: [__cl_uint2; 8usize],
    pub v4: [__cl_uint4; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_uint16__bindgen_ty_1 {
    pub x: cl_uint,
    pub y: cl_uint,
    pub z: cl_uint,
    pub w: cl_uint,
    pub __spacer4: cl_uint,
    pub __spacer5: cl_uint,
    pub __spacer6: cl_uint,
    pub __spacer7: cl_uint,
    pub __spacer8: cl_uint,
    pub __spacer9: cl_uint,
    pub sa: cl_uint,
    pub sb: cl_uint,
    pub sc: cl_uint,
    pub sd: cl_uint,
    pub se: cl_uint,
    pub sf: cl_uint,
}
#[test]
fn bindgen_test_layout_cl_uint16__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_uint16__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_uint16__bindgen_ty_1>(),
        64usize,
        concat!("Size of: ", stringify!(cl_uint16__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uint16__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_uint16__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer4) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16__bindgen_ty_1),
            "::",
            stringify!(__spacer4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer5) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16__bindgen_ty_1),
            "::",
            stringify!(__spacer5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer6) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16__bindgen_ty_1),
            "::",
            stringify!(__spacer6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer7) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16__bindgen_ty_1),
            "::",
            stringify!(__spacer7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer8) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16__bindgen_ty_1),
            "::",
            stringify!(__spacer8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer9) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16__bindgen_ty_1),
            "::",
            stringify!(__spacer9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16__bindgen_ty_1),
            "::",
            stringify!(sa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sb) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16__bindgen_ty_1),
            "::",
            stringify!(sb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sc) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16__bindgen_ty_1),
            "::",
            stringify!(sc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sd) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16__bindgen_ty_1),
            "::",
            stringify!(sd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).se) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16__bindgen_ty_1),
            "::",
            stringify!(se)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sf) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16__bindgen_ty_1),
            "::",
            stringify!(sf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_uint16__bindgen_ty_2 {
    pub s0: cl_uint,
    pub s1: cl_uint,
    pub s2: cl_uint,
    pub s3: cl_uint,
    pub s4: cl_uint,
    pub s5: cl_uint,
    pub s6: cl_uint,
    pub s7: cl_uint,
    pub s8: cl_uint,
    pub s9: cl_uint,
    pub sA: cl_uint,
    pub sB: cl_uint,
    pub sC: cl_uint,
    pub sD: cl_uint,
    pub sE: cl_uint,
    pub sF: cl_uint,
}
#[test]
fn bindgen_test_layout_cl_uint16__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_uint16__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_uint16__bindgen_ty_2>(),
        64usize,
        concat!("Size of: ", stringify!(cl_uint16__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uint16__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_uint16__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16__bindgen_ty_2),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16__bindgen_ty_2),
            "::",
            stringify!(s3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16__bindgen_ty_2),
            "::",
            stringify!(s4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16__bindgen_ty_2),
            "::",
            stringify!(s5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16__bindgen_ty_2),
            "::",
            stringify!(s6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16__bindgen_ty_2),
            "::",
            stringify!(s7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s8) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16__bindgen_ty_2),
            "::",
            stringify!(s8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s9) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16__bindgen_ty_2),
            "::",
            stringify!(s9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sA) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16__bindgen_ty_2),
            "::",
            stringify!(sA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sB) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16__bindgen_ty_2),
            "::",
            stringify!(sB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sC) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16__bindgen_ty_2),
            "::",
            stringify!(sC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sD) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16__bindgen_ty_2),
            "::",
            stringify!(sD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sE) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16__bindgen_ty_2),
            "::",
            stringify!(sE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sF) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16__bindgen_ty_2),
            "::",
            stringify!(sF)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct cl_uint16__bindgen_ty_3 {
    pub lo: cl_uint8,
    pub hi: cl_uint8,
}
#[test]
fn bindgen_test_layout_cl_uint16__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_uint16__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_uint16__bindgen_ty_3>(),
        64usize,
        concat!("Size of: ", stringify!(cl_uint16__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uint16__bindgen_ty_3>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_uint16__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_uint16() {
    const UNINIT: ::std::mem::MaybeUninit<cl_uint16> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_uint16>(),
        64usize,
        concat!("Size of: ", stringify!(cl_uint16))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uint16>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_uint16))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16),
            "::",
            stringify!(v2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v4) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_uint16),
            "::",
            stringify!(v4)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_long2 {
    pub s: [cl_long; 2usize],
    pub __bindgen_anon_1: cl_long2__bindgen_ty_1,
    pub __bindgen_anon_2: cl_long2__bindgen_ty_2,
    pub __bindgen_anon_3: cl_long2__bindgen_ty_3,
    pub v2: __cl_long2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_long2__bindgen_ty_1 {
    pub x: cl_long,
    pub y: cl_long,
}
#[test]
fn bindgen_test_layout_cl_long2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_long2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_long2__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(cl_long2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_long2__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_long2__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long2__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long2__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_long2__bindgen_ty_2 {
    pub s0: cl_long,
    pub s1: cl_long,
}
#[test]
fn bindgen_test_layout_cl_long2__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_long2__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_long2__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(cl_long2__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_long2__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_long2__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long2__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long2__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_long2__bindgen_ty_3 {
    pub lo: cl_long,
    pub hi: cl_long,
}
#[test]
fn bindgen_test_layout_cl_long2__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_long2__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_long2__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(cl_long2__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_long2__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_long2__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long2__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long2__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_long2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_long2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_long2>(),
        16usize,
        concat!("Size of: ", stringify!(cl_long2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_long2>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_long2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long2),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long2),
            "::",
            stringify!(v2)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_long4 {
    pub s: [cl_long; 4usize],
    pub __bindgen_anon_1: cl_long4__bindgen_ty_1,
    pub __bindgen_anon_2: cl_long4__bindgen_ty_2,
    pub __bindgen_anon_3: cl_long4__bindgen_ty_3,
    pub v2: [__cl_long2; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_long4__bindgen_ty_1 {
    pub x: cl_long,
    pub y: cl_long,
    pub z: cl_long,
    pub w: cl_long,
}
#[test]
fn bindgen_test_layout_cl_long4__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_long4__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_long4__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(cl_long4__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_long4__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_long4__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long4__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long4__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long4__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long4__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_long4__bindgen_ty_2 {
    pub s0: cl_long,
    pub s1: cl_long,
    pub s2: cl_long,
    pub s3: cl_long,
}
#[test]
fn bindgen_test_layout_cl_long4__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_long4__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_long4__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(cl_long4__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_long4__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_long4__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long4__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long4__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long4__bindgen_ty_2),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long4__bindgen_ty_2),
            "::",
            stringify!(s3)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct cl_long4__bindgen_ty_3 {
    pub lo: cl_long2,
    pub hi: cl_long2,
}
#[test]
fn bindgen_test_layout_cl_long4__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_long4__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_long4__bindgen_ty_3>(),
        32usize,
        concat!("Size of: ", stringify!(cl_long4__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_long4__bindgen_ty_3>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_long4__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long4__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long4__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_long4() {
    const UNINIT: ::std::mem::MaybeUninit<cl_long4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_long4>(),
        32usize,
        concat!("Size of: ", stringify!(cl_long4))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_long4>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_long4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long4),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long4),
            "::",
            stringify!(v2)
        )
    );
}
pub type cl_long3 = cl_long4;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_long8 {
    pub s: [cl_long; 8usize],
    pub __bindgen_anon_1: cl_long8__bindgen_ty_1,
    pub __bindgen_anon_2: cl_long8__bindgen_ty_2,
    pub __bindgen_anon_3: cl_long8__bindgen_ty_3,
    pub v2: [__cl_long2; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_long8__bindgen_ty_1 {
    pub x: cl_long,
    pub y: cl_long,
    pub z: cl_long,
    pub w: cl_long,
}
#[test]
fn bindgen_test_layout_cl_long8__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_long8__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_long8__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(cl_long8__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_long8__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_long8__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long8__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long8__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long8__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long8__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_long8__bindgen_ty_2 {
    pub s0: cl_long,
    pub s1: cl_long,
    pub s2: cl_long,
    pub s3: cl_long,
    pub s4: cl_long,
    pub s5: cl_long,
    pub s6: cl_long,
    pub s7: cl_long,
}
#[test]
fn bindgen_test_layout_cl_long8__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_long8__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_long8__bindgen_ty_2>(),
        64usize,
        concat!("Size of: ", stringify!(cl_long8__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_long8__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_long8__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long8__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long8__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long8__bindgen_ty_2),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long8__bindgen_ty_2),
            "::",
            stringify!(s3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long8__bindgen_ty_2),
            "::",
            stringify!(s4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long8__bindgen_ty_2),
            "::",
            stringify!(s5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long8__bindgen_ty_2),
            "::",
            stringify!(s6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long8__bindgen_ty_2),
            "::",
            stringify!(s7)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct cl_long8__bindgen_ty_3 {
    pub lo: cl_long4,
    pub hi: cl_long4,
}
#[test]
fn bindgen_test_layout_cl_long8__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_long8__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_long8__bindgen_ty_3>(),
        64usize,
        concat!("Size of: ", stringify!(cl_long8__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_long8__bindgen_ty_3>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_long8__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long8__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long8__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_long8() {
    const UNINIT: ::std::mem::MaybeUninit<cl_long8> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_long8>(),
        64usize,
        concat!("Size of: ", stringify!(cl_long8))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_long8>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_long8))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long8),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long8),
            "::",
            stringify!(v2)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_long16 {
    pub s: [cl_long; 16usize],
    pub __bindgen_anon_1: cl_long16__bindgen_ty_1,
    pub __bindgen_anon_2: cl_long16__bindgen_ty_2,
    pub __bindgen_anon_3: cl_long16__bindgen_ty_3,
    pub v2: [__cl_long2; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_long16__bindgen_ty_1 {
    pub x: cl_long,
    pub y: cl_long,
    pub z: cl_long,
    pub w: cl_long,
    pub __spacer4: cl_long,
    pub __spacer5: cl_long,
    pub __spacer6: cl_long,
    pub __spacer7: cl_long,
    pub __spacer8: cl_long,
    pub __spacer9: cl_long,
    pub sa: cl_long,
    pub sb: cl_long,
    pub sc: cl_long,
    pub sd: cl_long,
    pub se: cl_long,
    pub sf: cl_long,
}
#[test]
fn bindgen_test_layout_cl_long16__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_long16__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_long16__bindgen_ty_1>(),
        128usize,
        concat!("Size of: ", stringify!(cl_long16__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_long16__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_long16__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer4) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16__bindgen_ty_1),
            "::",
            stringify!(__spacer4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer5) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16__bindgen_ty_1),
            "::",
            stringify!(__spacer5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer6) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16__bindgen_ty_1),
            "::",
            stringify!(__spacer6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer7) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16__bindgen_ty_1),
            "::",
            stringify!(__spacer7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer8) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16__bindgen_ty_1),
            "::",
            stringify!(__spacer8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer9) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16__bindgen_ty_1),
            "::",
            stringify!(__spacer9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16__bindgen_ty_1),
            "::",
            stringify!(sa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sb) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16__bindgen_ty_1),
            "::",
            stringify!(sb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sc) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16__bindgen_ty_1),
            "::",
            stringify!(sc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sd) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16__bindgen_ty_1),
            "::",
            stringify!(sd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).se) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16__bindgen_ty_1),
            "::",
            stringify!(se)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sf) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16__bindgen_ty_1),
            "::",
            stringify!(sf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_long16__bindgen_ty_2 {
    pub s0: cl_long,
    pub s1: cl_long,
    pub s2: cl_long,
    pub s3: cl_long,
    pub s4: cl_long,
    pub s5: cl_long,
    pub s6: cl_long,
    pub s7: cl_long,
    pub s8: cl_long,
    pub s9: cl_long,
    pub sA: cl_long,
    pub sB: cl_long,
    pub sC: cl_long,
    pub sD: cl_long,
    pub sE: cl_long,
    pub sF: cl_long,
}
#[test]
fn bindgen_test_layout_cl_long16__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_long16__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_long16__bindgen_ty_2>(),
        128usize,
        concat!("Size of: ", stringify!(cl_long16__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_long16__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_long16__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16__bindgen_ty_2),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16__bindgen_ty_2),
            "::",
            stringify!(s3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16__bindgen_ty_2),
            "::",
            stringify!(s4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16__bindgen_ty_2),
            "::",
            stringify!(s5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16__bindgen_ty_2),
            "::",
            stringify!(s6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16__bindgen_ty_2),
            "::",
            stringify!(s7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s8) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16__bindgen_ty_2),
            "::",
            stringify!(s8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s9) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16__bindgen_ty_2),
            "::",
            stringify!(s9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sA) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16__bindgen_ty_2),
            "::",
            stringify!(sA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sB) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16__bindgen_ty_2),
            "::",
            stringify!(sB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sC) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16__bindgen_ty_2),
            "::",
            stringify!(sC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sD) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16__bindgen_ty_2),
            "::",
            stringify!(sD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sE) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16__bindgen_ty_2),
            "::",
            stringify!(sE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sF) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16__bindgen_ty_2),
            "::",
            stringify!(sF)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct cl_long16__bindgen_ty_3 {
    pub lo: cl_long8,
    pub hi: cl_long8,
}
#[test]
fn bindgen_test_layout_cl_long16__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_long16__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_long16__bindgen_ty_3>(),
        128usize,
        concat!("Size of: ", stringify!(cl_long16__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_long16__bindgen_ty_3>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_long16__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_long16() {
    const UNINIT: ::std::mem::MaybeUninit<cl_long16> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_long16>(),
        128usize,
        concat!("Size of: ", stringify!(cl_long16))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_long16>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_long16))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_long16),
            "::",
            stringify!(v2)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_ulong2 {
    pub s: [cl_ulong; 2usize],
    pub __bindgen_anon_1: cl_ulong2__bindgen_ty_1,
    pub __bindgen_anon_2: cl_ulong2__bindgen_ty_2,
    pub __bindgen_anon_3: cl_ulong2__bindgen_ty_3,
    pub v2: __cl_ulong2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_ulong2__bindgen_ty_1 {
    pub x: cl_ulong,
    pub y: cl_ulong,
}
#[test]
fn bindgen_test_layout_cl_ulong2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_ulong2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_ulong2__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(cl_ulong2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ulong2__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_ulong2__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong2__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong2__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_ulong2__bindgen_ty_2 {
    pub s0: cl_ulong,
    pub s1: cl_ulong,
}
#[test]
fn bindgen_test_layout_cl_ulong2__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_ulong2__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_ulong2__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(cl_ulong2__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ulong2__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_ulong2__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong2__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong2__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_ulong2__bindgen_ty_3 {
    pub lo: cl_ulong,
    pub hi: cl_ulong,
}
#[test]
fn bindgen_test_layout_cl_ulong2__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_ulong2__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_ulong2__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(cl_ulong2__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ulong2__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_ulong2__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong2__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong2__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_ulong2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_ulong2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_ulong2>(),
        16usize,
        concat!("Size of: ", stringify!(cl_ulong2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ulong2>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_ulong2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong2),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong2),
            "::",
            stringify!(v2)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_ulong4 {
    pub s: [cl_ulong; 4usize],
    pub __bindgen_anon_1: cl_ulong4__bindgen_ty_1,
    pub __bindgen_anon_2: cl_ulong4__bindgen_ty_2,
    pub __bindgen_anon_3: cl_ulong4__bindgen_ty_3,
    pub v2: [__cl_ulong2; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_ulong4__bindgen_ty_1 {
    pub x: cl_ulong,
    pub y: cl_ulong,
    pub z: cl_ulong,
    pub w: cl_ulong,
}
#[test]
fn bindgen_test_layout_cl_ulong4__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_ulong4__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_ulong4__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(cl_ulong4__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ulong4__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_ulong4__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong4__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong4__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong4__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong4__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_ulong4__bindgen_ty_2 {
    pub s0: cl_ulong,
    pub s1: cl_ulong,
    pub s2: cl_ulong,
    pub s3: cl_ulong,
}
#[test]
fn bindgen_test_layout_cl_ulong4__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_ulong4__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_ulong4__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(cl_ulong4__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ulong4__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_ulong4__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong4__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong4__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong4__bindgen_ty_2),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong4__bindgen_ty_2),
            "::",
            stringify!(s3)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct cl_ulong4__bindgen_ty_3 {
    pub lo: cl_ulong2,
    pub hi: cl_ulong2,
}
#[test]
fn bindgen_test_layout_cl_ulong4__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_ulong4__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_ulong4__bindgen_ty_3>(),
        32usize,
        concat!("Size of: ", stringify!(cl_ulong4__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ulong4__bindgen_ty_3>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_ulong4__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong4__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong4__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_ulong4() {
    const UNINIT: ::std::mem::MaybeUninit<cl_ulong4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_ulong4>(),
        32usize,
        concat!("Size of: ", stringify!(cl_ulong4))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ulong4>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_ulong4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong4),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong4),
            "::",
            stringify!(v2)
        )
    );
}
pub type cl_ulong3 = cl_ulong4;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_ulong8 {
    pub s: [cl_ulong; 8usize],
    pub __bindgen_anon_1: cl_ulong8__bindgen_ty_1,
    pub __bindgen_anon_2: cl_ulong8__bindgen_ty_2,
    pub __bindgen_anon_3: cl_ulong8__bindgen_ty_3,
    pub v2: [__cl_ulong2; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_ulong8__bindgen_ty_1 {
    pub x: cl_ulong,
    pub y: cl_ulong,
    pub z: cl_ulong,
    pub w: cl_ulong,
}
#[test]
fn bindgen_test_layout_cl_ulong8__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_ulong8__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_ulong8__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(cl_ulong8__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ulong8__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_ulong8__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong8__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong8__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong8__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong8__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_ulong8__bindgen_ty_2 {
    pub s0: cl_ulong,
    pub s1: cl_ulong,
    pub s2: cl_ulong,
    pub s3: cl_ulong,
    pub s4: cl_ulong,
    pub s5: cl_ulong,
    pub s6: cl_ulong,
    pub s7: cl_ulong,
}
#[test]
fn bindgen_test_layout_cl_ulong8__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_ulong8__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_ulong8__bindgen_ty_2>(),
        64usize,
        concat!("Size of: ", stringify!(cl_ulong8__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ulong8__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_ulong8__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong8__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong8__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong8__bindgen_ty_2),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong8__bindgen_ty_2),
            "::",
            stringify!(s3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong8__bindgen_ty_2),
            "::",
            stringify!(s4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong8__bindgen_ty_2),
            "::",
            stringify!(s5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong8__bindgen_ty_2),
            "::",
            stringify!(s6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong8__bindgen_ty_2),
            "::",
            stringify!(s7)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct cl_ulong8__bindgen_ty_3 {
    pub lo: cl_ulong4,
    pub hi: cl_ulong4,
}
#[test]
fn bindgen_test_layout_cl_ulong8__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_ulong8__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_ulong8__bindgen_ty_3>(),
        64usize,
        concat!("Size of: ", stringify!(cl_ulong8__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ulong8__bindgen_ty_3>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_ulong8__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong8__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong8__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_ulong8() {
    const UNINIT: ::std::mem::MaybeUninit<cl_ulong8> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_ulong8>(),
        64usize,
        concat!("Size of: ", stringify!(cl_ulong8))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ulong8>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_ulong8))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong8),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong8),
            "::",
            stringify!(v2)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_ulong16 {
    pub s: [cl_ulong; 16usize],
    pub __bindgen_anon_1: cl_ulong16__bindgen_ty_1,
    pub __bindgen_anon_2: cl_ulong16__bindgen_ty_2,
    pub __bindgen_anon_3: cl_ulong16__bindgen_ty_3,
    pub v2: [__cl_ulong2; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_ulong16__bindgen_ty_1 {
    pub x: cl_ulong,
    pub y: cl_ulong,
    pub z: cl_ulong,
    pub w: cl_ulong,
    pub __spacer4: cl_ulong,
    pub __spacer5: cl_ulong,
    pub __spacer6: cl_ulong,
    pub __spacer7: cl_ulong,
    pub __spacer8: cl_ulong,
    pub __spacer9: cl_ulong,
    pub sa: cl_ulong,
    pub sb: cl_ulong,
    pub sc: cl_ulong,
    pub sd: cl_ulong,
    pub se: cl_ulong,
    pub sf: cl_ulong,
}
#[test]
fn bindgen_test_layout_cl_ulong16__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_ulong16__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_ulong16__bindgen_ty_1>(),
        128usize,
        concat!("Size of: ", stringify!(cl_ulong16__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ulong16__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_ulong16__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer4) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16__bindgen_ty_1),
            "::",
            stringify!(__spacer4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer5) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16__bindgen_ty_1),
            "::",
            stringify!(__spacer5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer6) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16__bindgen_ty_1),
            "::",
            stringify!(__spacer6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer7) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16__bindgen_ty_1),
            "::",
            stringify!(__spacer7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer8) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16__bindgen_ty_1),
            "::",
            stringify!(__spacer8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer9) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16__bindgen_ty_1),
            "::",
            stringify!(__spacer9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16__bindgen_ty_1),
            "::",
            stringify!(sa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sb) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16__bindgen_ty_1),
            "::",
            stringify!(sb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sc) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16__bindgen_ty_1),
            "::",
            stringify!(sc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sd) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16__bindgen_ty_1),
            "::",
            stringify!(sd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).se) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16__bindgen_ty_1),
            "::",
            stringify!(se)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sf) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16__bindgen_ty_1),
            "::",
            stringify!(sf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_ulong16__bindgen_ty_2 {
    pub s0: cl_ulong,
    pub s1: cl_ulong,
    pub s2: cl_ulong,
    pub s3: cl_ulong,
    pub s4: cl_ulong,
    pub s5: cl_ulong,
    pub s6: cl_ulong,
    pub s7: cl_ulong,
    pub s8: cl_ulong,
    pub s9: cl_ulong,
    pub sA: cl_ulong,
    pub sB: cl_ulong,
    pub sC: cl_ulong,
    pub sD: cl_ulong,
    pub sE: cl_ulong,
    pub sF: cl_ulong,
}
#[test]
fn bindgen_test_layout_cl_ulong16__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_ulong16__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_ulong16__bindgen_ty_2>(),
        128usize,
        concat!("Size of: ", stringify!(cl_ulong16__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ulong16__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_ulong16__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16__bindgen_ty_2),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16__bindgen_ty_2),
            "::",
            stringify!(s3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16__bindgen_ty_2),
            "::",
            stringify!(s4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16__bindgen_ty_2),
            "::",
            stringify!(s5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16__bindgen_ty_2),
            "::",
            stringify!(s6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16__bindgen_ty_2),
            "::",
            stringify!(s7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s8) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16__bindgen_ty_2),
            "::",
            stringify!(s8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s9) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16__bindgen_ty_2),
            "::",
            stringify!(s9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sA) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16__bindgen_ty_2),
            "::",
            stringify!(sA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sB) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16__bindgen_ty_2),
            "::",
            stringify!(sB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sC) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16__bindgen_ty_2),
            "::",
            stringify!(sC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sD) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16__bindgen_ty_2),
            "::",
            stringify!(sD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sE) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16__bindgen_ty_2),
            "::",
            stringify!(sE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sF) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16__bindgen_ty_2),
            "::",
            stringify!(sF)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct cl_ulong16__bindgen_ty_3 {
    pub lo: cl_ulong8,
    pub hi: cl_ulong8,
}
#[test]
fn bindgen_test_layout_cl_ulong16__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_ulong16__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_ulong16__bindgen_ty_3>(),
        128usize,
        concat!("Size of: ", stringify!(cl_ulong16__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ulong16__bindgen_ty_3>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_ulong16__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_ulong16() {
    const UNINIT: ::std::mem::MaybeUninit<cl_ulong16> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_ulong16>(),
        128usize,
        concat!("Size of: ", stringify!(cl_ulong16))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ulong16>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_ulong16))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_ulong16),
            "::",
            stringify!(v2)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_float2 {
    pub s: [cl_float; 2usize],
    pub __bindgen_anon_1: cl_float2__bindgen_ty_1,
    pub __bindgen_anon_2: cl_float2__bindgen_ty_2,
    pub __bindgen_anon_3: cl_float2__bindgen_ty_3,
    pub v2: __cl_float2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_float2__bindgen_ty_1 {
    pub x: cl_float,
    pub y: cl_float,
}
#[test]
fn bindgen_test_layout_cl_float2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_float2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_float2__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(cl_float2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_float2__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_float2__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float2__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float2__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_float2__bindgen_ty_2 {
    pub s0: cl_float,
    pub s1: cl_float,
}
#[test]
fn bindgen_test_layout_cl_float2__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_float2__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_float2__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(cl_float2__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_float2__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_float2__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float2__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float2__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_float2__bindgen_ty_3 {
    pub lo: cl_float,
    pub hi: cl_float,
}
#[test]
fn bindgen_test_layout_cl_float2__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_float2__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_float2__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(cl_float2__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_float2__bindgen_ty_3>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_float2__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float2__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float2__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_float2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_float2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_float2>(),
        8usize,
        concat!("Size of: ", stringify!(cl_float2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_float2>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_float2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float2),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float2),
            "::",
            stringify!(v2)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_float4 {
    pub s: [cl_float; 4usize],
    pub __bindgen_anon_1: cl_float4__bindgen_ty_1,
    pub __bindgen_anon_2: cl_float4__bindgen_ty_2,
    pub __bindgen_anon_3: cl_float4__bindgen_ty_3,
    pub v2: [__cl_float2; 2usize],
    pub v4: __cl_float4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_float4__bindgen_ty_1 {
    pub x: cl_float,
    pub y: cl_float,
    pub z: cl_float,
    pub w: cl_float,
}
#[test]
fn bindgen_test_layout_cl_float4__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_float4__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_float4__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(cl_float4__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_float4__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_float4__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float4__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float4__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float4__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float4__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_float4__bindgen_ty_2 {
    pub s0: cl_float,
    pub s1: cl_float,
    pub s2: cl_float,
    pub s3: cl_float,
}
#[test]
fn bindgen_test_layout_cl_float4__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_float4__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_float4__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(cl_float4__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_float4__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_float4__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float4__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float4__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float4__bindgen_ty_2),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float4__bindgen_ty_2),
            "::",
            stringify!(s3)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cl_float4__bindgen_ty_3 {
    pub lo: cl_float2,
    pub hi: cl_float2,
}
#[test]
fn bindgen_test_layout_cl_float4__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_float4__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_float4__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(cl_float4__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_float4__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_float4__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float4__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float4__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_float4() {
    const UNINIT: ::std::mem::MaybeUninit<cl_float4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_float4>(),
        16usize,
        concat!("Size of: ", stringify!(cl_float4))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_float4>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_float4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float4),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float4),
            "::",
            stringify!(v2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v4) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float4),
            "::",
            stringify!(v4)
        )
    );
}
pub type cl_float3 = cl_float4;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_float8 {
    pub s: [cl_float; 8usize],
    pub __bindgen_anon_1: cl_float8__bindgen_ty_1,
    pub __bindgen_anon_2: cl_float8__bindgen_ty_2,
    pub __bindgen_anon_3: cl_float8__bindgen_ty_3,
    pub v2: [__cl_float2; 4usize],
    pub v4: [__cl_float4; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_float8__bindgen_ty_1 {
    pub x: cl_float,
    pub y: cl_float,
    pub z: cl_float,
    pub w: cl_float,
}
#[test]
fn bindgen_test_layout_cl_float8__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_float8__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_float8__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(cl_float8__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_float8__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_float8__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float8__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float8__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float8__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float8__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_float8__bindgen_ty_2 {
    pub s0: cl_float,
    pub s1: cl_float,
    pub s2: cl_float,
    pub s3: cl_float,
    pub s4: cl_float,
    pub s5: cl_float,
    pub s6: cl_float,
    pub s7: cl_float,
}
#[test]
fn bindgen_test_layout_cl_float8__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_float8__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_float8__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(cl_float8__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_float8__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_float8__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float8__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float8__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float8__bindgen_ty_2),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float8__bindgen_ty_2),
            "::",
            stringify!(s3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float8__bindgen_ty_2),
            "::",
            stringify!(s4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float8__bindgen_ty_2),
            "::",
            stringify!(s5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float8__bindgen_ty_2),
            "::",
            stringify!(s6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float8__bindgen_ty_2),
            "::",
            stringify!(s7)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct cl_float8__bindgen_ty_3 {
    pub lo: cl_float4,
    pub hi: cl_float4,
}
#[test]
fn bindgen_test_layout_cl_float8__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_float8__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_float8__bindgen_ty_3>(),
        32usize,
        concat!("Size of: ", stringify!(cl_float8__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_float8__bindgen_ty_3>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_float8__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float8__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float8__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_float8() {
    const UNINIT: ::std::mem::MaybeUninit<cl_float8> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_float8>(),
        32usize,
        concat!("Size of: ", stringify!(cl_float8))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_float8>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_float8))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float8),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float8),
            "::",
            stringify!(v2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v4) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float8),
            "::",
            stringify!(v4)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_float16 {
    pub s: [cl_float; 16usize],
    pub __bindgen_anon_1: cl_float16__bindgen_ty_1,
    pub __bindgen_anon_2: cl_float16__bindgen_ty_2,
    pub __bindgen_anon_3: cl_float16__bindgen_ty_3,
    pub v2: [__cl_float2; 8usize],
    pub v4: [__cl_float4; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_float16__bindgen_ty_1 {
    pub x: cl_float,
    pub y: cl_float,
    pub z: cl_float,
    pub w: cl_float,
    pub __spacer4: cl_float,
    pub __spacer5: cl_float,
    pub __spacer6: cl_float,
    pub __spacer7: cl_float,
    pub __spacer8: cl_float,
    pub __spacer9: cl_float,
    pub sa: cl_float,
    pub sb: cl_float,
    pub sc: cl_float,
    pub sd: cl_float,
    pub se: cl_float,
    pub sf: cl_float,
}
#[test]
fn bindgen_test_layout_cl_float16__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_float16__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_float16__bindgen_ty_1>(),
        64usize,
        concat!("Size of: ", stringify!(cl_float16__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_float16__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_float16__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer4) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16__bindgen_ty_1),
            "::",
            stringify!(__spacer4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer5) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16__bindgen_ty_1),
            "::",
            stringify!(__spacer5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer6) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16__bindgen_ty_1),
            "::",
            stringify!(__spacer6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer7) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16__bindgen_ty_1),
            "::",
            stringify!(__spacer7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer8) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16__bindgen_ty_1),
            "::",
            stringify!(__spacer8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer9) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16__bindgen_ty_1),
            "::",
            stringify!(__spacer9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16__bindgen_ty_1),
            "::",
            stringify!(sa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sb) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16__bindgen_ty_1),
            "::",
            stringify!(sb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sc) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16__bindgen_ty_1),
            "::",
            stringify!(sc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sd) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16__bindgen_ty_1),
            "::",
            stringify!(sd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).se) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16__bindgen_ty_1),
            "::",
            stringify!(se)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sf) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16__bindgen_ty_1),
            "::",
            stringify!(sf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_float16__bindgen_ty_2 {
    pub s0: cl_float,
    pub s1: cl_float,
    pub s2: cl_float,
    pub s3: cl_float,
    pub s4: cl_float,
    pub s5: cl_float,
    pub s6: cl_float,
    pub s7: cl_float,
    pub s8: cl_float,
    pub s9: cl_float,
    pub sA: cl_float,
    pub sB: cl_float,
    pub sC: cl_float,
    pub sD: cl_float,
    pub sE: cl_float,
    pub sF: cl_float,
}
#[test]
fn bindgen_test_layout_cl_float16__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_float16__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_float16__bindgen_ty_2>(),
        64usize,
        concat!("Size of: ", stringify!(cl_float16__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_float16__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_float16__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16__bindgen_ty_2),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16__bindgen_ty_2),
            "::",
            stringify!(s3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16__bindgen_ty_2),
            "::",
            stringify!(s4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16__bindgen_ty_2),
            "::",
            stringify!(s5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16__bindgen_ty_2),
            "::",
            stringify!(s6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16__bindgen_ty_2),
            "::",
            stringify!(s7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s8) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16__bindgen_ty_2),
            "::",
            stringify!(s8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s9) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16__bindgen_ty_2),
            "::",
            stringify!(s9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sA) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16__bindgen_ty_2),
            "::",
            stringify!(sA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sB) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16__bindgen_ty_2),
            "::",
            stringify!(sB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sC) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16__bindgen_ty_2),
            "::",
            stringify!(sC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sD) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16__bindgen_ty_2),
            "::",
            stringify!(sD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sE) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16__bindgen_ty_2),
            "::",
            stringify!(sE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sF) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16__bindgen_ty_2),
            "::",
            stringify!(sF)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct cl_float16__bindgen_ty_3 {
    pub lo: cl_float8,
    pub hi: cl_float8,
}
#[test]
fn bindgen_test_layout_cl_float16__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_float16__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_float16__bindgen_ty_3>(),
        64usize,
        concat!("Size of: ", stringify!(cl_float16__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_float16__bindgen_ty_3>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_float16__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_float16() {
    const UNINIT: ::std::mem::MaybeUninit<cl_float16> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_float16>(),
        64usize,
        concat!("Size of: ", stringify!(cl_float16))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_float16>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_float16))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16),
            "::",
            stringify!(v2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v4) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_float16),
            "::",
            stringify!(v4)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_double2 {
    pub s: [cl_double; 2usize],
    pub __bindgen_anon_1: cl_double2__bindgen_ty_1,
    pub __bindgen_anon_2: cl_double2__bindgen_ty_2,
    pub __bindgen_anon_3: cl_double2__bindgen_ty_3,
    pub v2: __cl_double2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_double2__bindgen_ty_1 {
    pub x: cl_double,
    pub y: cl_double,
}
#[test]
fn bindgen_test_layout_cl_double2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_double2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_double2__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(cl_double2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_double2__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_double2__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double2__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double2__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_double2__bindgen_ty_2 {
    pub s0: cl_double,
    pub s1: cl_double,
}
#[test]
fn bindgen_test_layout_cl_double2__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_double2__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_double2__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(cl_double2__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_double2__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_double2__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double2__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double2__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_double2__bindgen_ty_3 {
    pub lo: cl_double,
    pub hi: cl_double,
}
#[test]
fn bindgen_test_layout_cl_double2__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_double2__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_double2__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(cl_double2__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_double2__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_double2__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double2__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double2__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_double2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_double2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_double2>(),
        16usize,
        concat!("Size of: ", stringify!(cl_double2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_double2>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_double2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double2),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double2),
            "::",
            stringify!(v2)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_double4 {
    pub s: [cl_double; 4usize],
    pub __bindgen_anon_1: cl_double4__bindgen_ty_1,
    pub __bindgen_anon_2: cl_double4__bindgen_ty_2,
    pub __bindgen_anon_3: cl_double4__bindgen_ty_3,
    pub v2: [__cl_double2; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_double4__bindgen_ty_1 {
    pub x: cl_double,
    pub y: cl_double,
    pub z: cl_double,
    pub w: cl_double,
}
#[test]
fn bindgen_test_layout_cl_double4__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_double4__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_double4__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(cl_double4__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_double4__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_double4__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double4__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double4__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double4__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double4__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_double4__bindgen_ty_2 {
    pub s0: cl_double,
    pub s1: cl_double,
    pub s2: cl_double,
    pub s3: cl_double,
}
#[test]
fn bindgen_test_layout_cl_double4__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_double4__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_double4__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(cl_double4__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_double4__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_double4__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double4__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double4__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double4__bindgen_ty_2),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double4__bindgen_ty_2),
            "::",
            stringify!(s3)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct cl_double4__bindgen_ty_3 {
    pub lo: cl_double2,
    pub hi: cl_double2,
}
#[test]
fn bindgen_test_layout_cl_double4__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_double4__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_double4__bindgen_ty_3>(),
        32usize,
        concat!("Size of: ", stringify!(cl_double4__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_double4__bindgen_ty_3>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_double4__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double4__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double4__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_double4() {
    const UNINIT: ::std::mem::MaybeUninit<cl_double4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_double4>(),
        32usize,
        concat!("Size of: ", stringify!(cl_double4))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_double4>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_double4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double4),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double4),
            "::",
            stringify!(v2)
        )
    );
}
pub type cl_double3 = cl_double4;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_double8 {
    pub s: [cl_double; 8usize],
    pub __bindgen_anon_1: cl_double8__bindgen_ty_1,
    pub __bindgen_anon_2: cl_double8__bindgen_ty_2,
    pub __bindgen_anon_3: cl_double8__bindgen_ty_3,
    pub v2: [__cl_double2; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_double8__bindgen_ty_1 {
    pub x: cl_double,
    pub y: cl_double,
    pub z: cl_double,
    pub w: cl_double,
}
#[test]
fn bindgen_test_layout_cl_double8__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_double8__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_double8__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(cl_double8__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_double8__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_double8__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double8__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double8__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double8__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double8__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_double8__bindgen_ty_2 {
    pub s0: cl_double,
    pub s1: cl_double,
    pub s2: cl_double,
    pub s3: cl_double,
    pub s4: cl_double,
    pub s5: cl_double,
    pub s6: cl_double,
    pub s7: cl_double,
}
#[test]
fn bindgen_test_layout_cl_double8__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_double8__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_double8__bindgen_ty_2>(),
        64usize,
        concat!("Size of: ", stringify!(cl_double8__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_double8__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_double8__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double8__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double8__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double8__bindgen_ty_2),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double8__bindgen_ty_2),
            "::",
            stringify!(s3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double8__bindgen_ty_2),
            "::",
            stringify!(s4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double8__bindgen_ty_2),
            "::",
            stringify!(s5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double8__bindgen_ty_2),
            "::",
            stringify!(s6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double8__bindgen_ty_2),
            "::",
            stringify!(s7)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct cl_double8__bindgen_ty_3 {
    pub lo: cl_double4,
    pub hi: cl_double4,
}
#[test]
fn bindgen_test_layout_cl_double8__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_double8__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_double8__bindgen_ty_3>(),
        64usize,
        concat!("Size of: ", stringify!(cl_double8__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_double8__bindgen_ty_3>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_double8__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double8__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double8__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_double8() {
    const UNINIT: ::std::mem::MaybeUninit<cl_double8> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_double8>(),
        64usize,
        concat!("Size of: ", stringify!(cl_double8))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_double8>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_double8))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double8),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double8),
            "::",
            stringify!(v2)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_double16 {
    pub s: [cl_double; 16usize],
    pub __bindgen_anon_1: cl_double16__bindgen_ty_1,
    pub __bindgen_anon_2: cl_double16__bindgen_ty_2,
    pub __bindgen_anon_3: cl_double16__bindgen_ty_3,
    pub v2: [__cl_double2; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_double16__bindgen_ty_1 {
    pub x: cl_double,
    pub y: cl_double,
    pub z: cl_double,
    pub w: cl_double,
    pub __spacer4: cl_double,
    pub __spacer5: cl_double,
    pub __spacer6: cl_double,
    pub __spacer7: cl_double,
    pub __spacer8: cl_double,
    pub __spacer9: cl_double,
    pub sa: cl_double,
    pub sb: cl_double,
    pub sc: cl_double,
    pub sd: cl_double,
    pub se: cl_double,
    pub sf: cl_double,
}
#[test]
fn bindgen_test_layout_cl_double16__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<cl_double16__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_double16__bindgen_ty_1>(),
        128usize,
        concat!("Size of: ", stringify!(cl_double16__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_double16__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_double16__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer4) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16__bindgen_ty_1),
            "::",
            stringify!(__spacer4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer5) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16__bindgen_ty_1),
            "::",
            stringify!(__spacer5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer6) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16__bindgen_ty_1),
            "::",
            stringify!(__spacer6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer7) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16__bindgen_ty_1),
            "::",
            stringify!(__spacer7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer8) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16__bindgen_ty_1),
            "::",
            stringify!(__spacer8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spacer9) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16__bindgen_ty_1),
            "::",
            stringify!(__spacer9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16__bindgen_ty_1),
            "::",
            stringify!(sa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sb) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16__bindgen_ty_1),
            "::",
            stringify!(sb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sc) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16__bindgen_ty_1),
            "::",
            stringify!(sc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sd) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16__bindgen_ty_1),
            "::",
            stringify!(sd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).se) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16__bindgen_ty_1),
            "::",
            stringify!(se)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sf) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16__bindgen_ty_1),
            "::",
            stringify!(sf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_double16__bindgen_ty_2 {
    pub s0: cl_double,
    pub s1: cl_double,
    pub s2: cl_double,
    pub s3: cl_double,
    pub s4: cl_double,
    pub s5: cl_double,
    pub s6: cl_double,
    pub s7: cl_double,
    pub s8: cl_double,
    pub s9: cl_double,
    pub sA: cl_double,
    pub sB: cl_double,
    pub sC: cl_double,
    pub sD: cl_double,
    pub sE: cl_double,
    pub sF: cl_double,
}
#[test]
fn bindgen_test_layout_cl_double16__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<cl_double16__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_double16__bindgen_ty_2>(),
        128usize,
        concat!("Size of: ", stringify!(cl_double16__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_double16__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_double16__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16__bindgen_ty_2),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16__bindgen_ty_2),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16__bindgen_ty_2),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16__bindgen_ty_2),
            "::",
            stringify!(s3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16__bindgen_ty_2),
            "::",
            stringify!(s4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16__bindgen_ty_2),
            "::",
            stringify!(s5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16__bindgen_ty_2),
            "::",
            stringify!(s6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16__bindgen_ty_2),
            "::",
            stringify!(s7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s8) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16__bindgen_ty_2),
            "::",
            stringify!(s8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s9) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16__bindgen_ty_2),
            "::",
            stringify!(s9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sA) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16__bindgen_ty_2),
            "::",
            stringify!(sA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sB) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16__bindgen_ty_2),
            "::",
            stringify!(sB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sC) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16__bindgen_ty_2),
            "::",
            stringify!(sC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sD) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16__bindgen_ty_2),
            "::",
            stringify!(sD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sE) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16__bindgen_ty_2),
            "::",
            stringify!(sE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sF) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16__bindgen_ty_2),
            "::",
            stringify!(sF)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct cl_double16__bindgen_ty_3 {
    pub lo: cl_double8,
    pub hi: cl_double8,
}
#[test]
fn bindgen_test_layout_cl_double16__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<cl_double16__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_double16__bindgen_ty_3>(),
        128usize,
        concat!("Size of: ", stringify!(cl_double16__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_double16__bindgen_ty_3>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_double16__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16__bindgen_ty_3),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16__bindgen_ty_3),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_cl_double16() {
    const UNINIT: ::std::mem::MaybeUninit<cl_double16> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cl_double16>(),
        128usize,
        concat!("Size of: ", stringify!(cl_double16))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_double16>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_double16))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cl_double16),
            "::",
            stringify!(v2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_platform_id {
    _unused: [u8; 0],
}
pub type cl_platform_id = *mut _cl_platform_id;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_device_id {
    _unused: [u8; 0],
}
pub type cl_device_id = *mut _cl_device_id;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_context {
    _unused: [u8; 0],
}
pub type cl_context = *mut _cl_context;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_command_queue {
    _unused: [u8; 0],
}
pub type cl_command_queue = *mut _cl_command_queue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_mem {
    _unused: [u8; 0],
}
pub type cl_mem = *mut _cl_mem;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_program {
    _unused: [u8; 0],
}
pub type cl_program = *mut _cl_program;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_kernel {
    _unused: [u8; 0],
}
pub type cl_kernel = *mut _cl_kernel;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_event {
    _unused: [u8; 0],
}
pub type cl_event = *mut _cl_event;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_sampler {
    _unused: [u8; 0],
}
pub type cl_sampler = *mut _cl_sampler;
pub type cl_bool = cl_uint;
pub type cl_bitfield = cl_ulong;
pub type cl_properties = cl_ulong;
pub type cl_device_type = cl_bitfield;
pub type cl_platform_info = cl_uint;
pub type cl_device_info = cl_uint;
pub type cl_device_fp_config = cl_bitfield;
pub type cl_device_mem_cache_type = cl_uint;
pub type cl_device_local_mem_type = cl_uint;
pub type cl_device_exec_capabilities = cl_bitfield;
pub type cl_device_svm_capabilities = cl_bitfield;
pub type cl_command_queue_properties = cl_bitfield;
pub type cl_device_partition_property = isize;
pub type cl_device_affinity_domain = cl_bitfield;
pub type cl_context_properties = isize;
pub type cl_context_info = cl_uint;
pub type cl_queue_properties = cl_properties;
pub type cl_command_queue_info = cl_uint;
pub type cl_channel_order = cl_uint;
pub type cl_channel_type = cl_uint;
pub type cl_mem_flags = cl_bitfield;
pub type cl_svm_mem_flags = cl_bitfield;
pub type cl_mem_object_type = cl_uint;
pub type cl_mem_info = cl_uint;
pub type cl_mem_migration_flags = cl_bitfield;
pub type cl_image_info = cl_uint;
pub type cl_buffer_create_type = cl_uint;
pub type cl_addressing_mode = cl_uint;
pub type cl_filter_mode = cl_uint;
pub type cl_sampler_info = cl_uint;
pub type cl_map_flags = cl_bitfield;
pub type cl_pipe_properties = isize;
pub type cl_pipe_info = cl_uint;
pub type cl_program_info = cl_uint;
pub type cl_program_build_info = cl_uint;
pub type cl_program_binary_type = cl_uint;
pub type cl_build_status = cl_int;
pub type cl_kernel_info = cl_uint;
pub type cl_kernel_arg_info = cl_uint;
pub type cl_kernel_arg_address_qualifier = cl_uint;
pub type cl_kernel_arg_access_qualifier = cl_uint;
pub type cl_kernel_arg_type_qualifier = cl_bitfield;
pub type cl_kernel_work_group_info = cl_uint;
pub type cl_kernel_sub_group_info = cl_uint;
pub type cl_event_info = cl_uint;
pub type cl_command_type = cl_uint;
pub type cl_profiling_info = cl_uint;
pub type cl_sampler_properties = cl_properties;
pub type cl_kernel_exec_info = cl_uint;
pub type cl_device_atomic_capabilities = cl_bitfield;
pub type cl_device_device_enqueue_capabilities = cl_bitfield;
pub type cl_khronos_vendor_id = cl_uint;
pub type cl_mem_properties = cl_properties;
pub type cl_version = cl_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_image_format {
    pub image_channel_order: cl_channel_order,
    pub image_channel_data_type: cl_channel_type,
}
#[test]
fn bindgen_test_layout__cl_image_format() {
    const UNINIT: ::std::mem::MaybeUninit<_cl_image_format> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_cl_image_format>(),
        8usize,
        concat!("Size of: ", stringify!(_cl_image_format))
    );
    assert_eq!(
        ::std::mem::align_of::<_cl_image_format>(),
        4usize,
        concat!("Alignment of ", stringify!(_cl_image_format))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_channel_order) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cl_image_format),
            "::",
            stringify!(image_channel_order)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_channel_data_type) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cl_image_format),
            "::",
            stringify!(image_channel_data_type)
        )
    );
}
pub type cl_image_format = _cl_image_format;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cl_image_desc {
    pub image_type: cl_mem_object_type,
    pub image_width: usize,
    pub image_height: usize,
    pub image_depth: usize,
    pub image_array_size: usize,
    pub image_row_pitch: usize,
    pub image_slice_pitch: usize,
    pub num_mip_levels: cl_uint,
    pub num_samples: cl_uint,
    pub __bindgen_anon_1: _cl_image_desc__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _cl_image_desc__bindgen_ty_1 {
    pub buffer: cl_mem,
    pub mem_object: cl_mem,
}
#[test]
fn bindgen_test_layout__cl_image_desc__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_cl_image_desc__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_cl_image_desc__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_cl_image_desc__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_cl_image_desc__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_cl_image_desc__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cl_image_desc__bindgen_ty_1),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem_object) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cl_image_desc__bindgen_ty_1),
            "::",
            stringify!(mem_object)
        )
    );
}
#[test]
fn bindgen_test_layout__cl_image_desc() {
    const UNINIT: ::std::mem::MaybeUninit<_cl_image_desc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_cl_image_desc>(),
        72usize,
        concat!("Size of: ", stringify!(_cl_image_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<_cl_image_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(_cl_image_desc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cl_image_desc),
            "::",
            stringify!(image_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_width) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cl_image_desc),
            "::",
            stringify!(image_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_height) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cl_image_desc),
            "::",
            stringify!(image_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_depth) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cl_image_desc),
            "::",
            stringify!(image_depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_array_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cl_image_desc),
            "::",
            stringify!(image_array_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_row_pitch) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_cl_image_desc),
            "::",
            stringify!(image_row_pitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image_slice_pitch) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_cl_image_desc),
            "::",
            stringify!(image_slice_pitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_mip_levels) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_cl_image_desc),
            "::",
            stringify!(num_mip_levels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_samples) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_cl_image_desc),
            "::",
            stringify!(num_samples)
        )
    );
}
pub type cl_image_desc = _cl_image_desc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_buffer_region {
    pub origin: usize,
    pub size: usize,
}
#[test]
fn bindgen_test_layout__cl_buffer_region() {
    const UNINIT: ::std::mem::MaybeUninit<_cl_buffer_region> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_cl_buffer_region>(),
        16usize,
        concat!("Size of: ", stringify!(_cl_buffer_region))
    );
    assert_eq!(
        ::std::mem::align_of::<_cl_buffer_region>(),
        8usize,
        concat!("Alignment of ", stringify!(_cl_buffer_region))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).origin) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cl_buffer_region),
            "::",
            stringify!(origin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cl_buffer_region),
            "::",
            stringify!(size)
        )
    );
}
pub type cl_buffer_region = _cl_buffer_region;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_name_version {
    pub version: cl_version,
    pub name: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout__cl_name_version() {
    const UNINIT: ::std::mem::MaybeUninit<_cl_name_version> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_cl_name_version>(),
        68usize,
        concat!("Size of: ", stringify!(_cl_name_version))
    );
    assert_eq!(
        ::std::mem::align_of::<_cl_name_version>(),
        4usize,
        concat!("Alignment of ", stringify!(_cl_name_version))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cl_name_version),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_cl_name_version),
            "::",
            stringify!(name)
        )
    );
}
pub type cl_name_version = _cl_name_version;
unsafe extern "C" {
    pub fn clGetPlatformIDs(
        num_entries: cl_uint,
        platforms: *mut cl_platform_id,
        num_platforms: *mut cl_uint,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clGetPlatformInfo(
        platform: cl_platform_id,
        param_name: cl_platform_info,
        param_value_size: usize,
        param_value: *mut ::std::os::raw::c_void,
        param_value_size_ret: *mut usize,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clGetDeviceIDs(
        platform: cl_platform_id,
        device_type: cl_device_type,
        num_entries: cl_uint,
        devices: *mut cl_device_id,
        num_devices: *mut cl_uint,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clGetDeviceInfo(
        device: cl_device_id,
        param_name: cl_device_info,
        param_value_size: usize,
        param_value: *mut ::std::os::raw::c_void,
        param_value_size_ret: *mut usize,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clCreateSubDevices(
        in_device: cl_device_id,
        properties: *const cl_device_partition_property,
        num_devices: cl_uint,
        out_devices: *mut cl_device_id,
        num_devices_ret: *mut cl_uint,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clRetainDevice(device: cl_device_id) -> cl_int;
}
unsafe extern "C" {
    pub fn clReleaseDevice(device: cl_device_id) -> cl_int;
}
unsafe extern "C" {
    pub fn clSetDefaultDeviceCommandQueue(
        context: cl_context,
        device: cl_device_id,
        command_queue: cl_command_queue,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clGetDeviceAndHostTimer(
        device: cl_device_id,
        device_timestamp: *mut cl_ulong,
        host_timestamp: *mut cl_ulong,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clGetHostTimer(device: cl_device_id, host_timestamp: *mut cl_ulong) -> cl_int;
}
unsafe extern "C" {
    pub fn clCreateContext(
        properties: *const cl_context_properties,
        num_devices: cl_uint,
        devices: *const cl_device_id,
        pfn_notify: ::std::option::Option<
            unsafe unsafe extern "C" fn(
                errinfo: *const ::std::os::raw::c_char,
                private_info: *const ::std::os::raw::c_void,
                cb: usize,
                user_data: *mut ::std::os::raw::c_void,
            ),
        >,
        user_data: *mut ::std::os::raw::c_void,
        errcode_ret: *mut cl_int,
    ) -> cl_context;
}
unsafe extern "C" {
    pub fn clCreateContextFromType(
        properties: *const cl_context_properties,
        device_type: cl_device_type,
        pfn_notify: ::std::option::Option<
            unsafe unsafe extern "C" fn(
                errinfo: *const ::std::os::raw::c_char,
                private_info: *const ::std::os::raw::c_void,
                cb: usize,
                user_data: *mut ::std::os::raw::c_void,
            ),
        >,
        user_data: *mut ::std::os::raw::c_void,
        errcode_ret: *mut cl_int,
    ) -> cl_context;
}
unsafe extern "C" {
    pub fn clRetainContext(context: cl_context) -> cl_int;
}
unsafe extern "C" {
    pub fn clReleaseContext(context: cl_context) -> cl_int;
}
unsafe extern "C" {
    pub fn clGetContextInfo(
        context: cl_context,
        param_name: cl_context_info,
        param_value_size: usize,
        param_value: *mut ::std::os::raw::c_void,
        param_value_size_ret: *mut usize,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clSetContextDestructorCallback(
        context: cl_context,
        pfn_notify: ::std::option::Option<
            unsafe unsafe extern "C" fn(context: cl_context, user_data: *mut ::std::os::raw::c_void),
        >,
        user_data: *mut ::std::os::raw::c_void,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clCreateCommandQueueWithProperties(
        context: cl_context,
        device: cl_device_id,
        properties: *const cl_queue_properties,
        errcode_ret: *mut cl_int,
    ) -> cl_command_queue;
}
unsafe extern "C" {
    pub fn clRetainCommandQueue(command_queue: cl_command_queue) -> cl_int;
}
unsafe extern "C" {
    pub fn clReleaseCommandQueue(command_queue: cl_command_queue) -> cl_int;
}
unsafe extern "C" {
    pub fn clGetCommandQueueInfo(
        command_queue: cl_command_queue,
        param_name: cl_command_queue_info,
        param_value_size: usize,
        param_value: *mut ::std::os::raw::c_void,
        param_value_size_ret: *mut usize,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clCreateBuffer(
        context: cl_context,
        flags: cl_mem_flags,
        size: usize,
        host_ptr: *mut ::std::os::raw::c_void,
        errcode_ret: *mut cl_int,
    ) -> cl_mem;
}
unsafe extern "C" {
    pub fn clCreateSubBuffer(
        buffer: cl_mem,
        flags: cl_mem_flags,
        buffer_create_type: cl_buffer_create_type,
        buffer_create_info: *const ::std::os::raw::c_void,
        errcode_ret: *mut cl_int,
    ) -> cl_mem;
}
unsafe extern "C" {
    pub fn clCreateImage(
        context: cl_context,
        flags: cl_mem_flags,
        image_format: *const cl_image_format,
        image_desc: *const cl_image_desc,
        host_ptr: *mut ::std::os::raw::c_void,
        errcode_ret: *mut cl_int,
    ) -> cl_mem;
}
unsafe extern "C" {
    pub fn clCreatePipe(
        context: cl_context,
        flags: cl_mem_flags,
        pipe_packet_size: cl_uint,
        pipe_max_packets: cl_uint,
        properties: *const cl_pipe_properties,
        errcode_ret: *mut cl_int,
    ) -> cl_mem;
}
unsafe extern "C" {
    pub fn clCreateBufferWithProperties(
        context: cl_context,
        properties: *const cl_mem_properties,
        flags: cl_mem_flags,
        size: usize,
        host_ptr: *mut ::std::os::raw::c_void,
        errcode_ret: *mut cl_int,
    ) -> cl_mem;
}
unsafe extern "C" {
    pub fn clCreateImageWithProperties(
        context: cl_context,
        properties: *const cl_mem_properties,
        flags: cl_mem_flags,
        image_format: *const cl_image_format,
        image_desc: *const cl_image_desc,
        host_ptr: *mut ::std::os::raw::c_void,
        errcode_ret: *mut cl_int,
    ) -> cl_mem;
}
unsafe extern "C" {
    pub fn clRetainMemObject(memobj: cl_mem) -> cl_int;
}
unsafe extern "C" {
    pub fn clReleaseMemObject(memobj: cl_mem) -> cl_int;
}
unsafe extern "C" {
    pub fn clGetSupportedImageFormats(
        context: cl_context,
        flags: cl_mem_flags,
        image_type: cl_mem_object_type,
        num_entries: cl_uint,
        image_formats: *mut cl_image_format,
        num_image_formats: *mut cl_uint,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clGetMemObjectInfo(
        memobj: cl_mem,
        param_name: cl_mem_info,
        param_value_size: usize,
        param_value: *mut ::std::os::raw::c_void,
        param_value_size_ret: *mut usize,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clGetImageInfo(
        image: cl_mem,
        param_name: cl_image_info,
        param_value_size: usize,
        param_value: *mut ::std::os::raw::c_void,
        param_value_size_ret: *mut usize,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clGetPipeInfo(
        pipe: cl_mem,
        param_name: cl_pipe_info,
        param_value_size: usize,
        param_value: *mut ::std::os::raw::c_void,
        param_value_size_ret: *mut usize,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clSetMemObjectDestructorCallback(
        memobj: cl_mem,
        pfn_notify: ::std::option::Option<
            unsafe unsafe extern "C" fn(memobj: cl_mem, user_data: *mut ::std::os::raw::c_void),
        >,
        user_data: *mut ::std::os::raw::c_void,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clSVMAlloc(
        context: cl_context,
        flags: cl_svm_mem_flags,
        size: usize,
        alignment: cl_uint,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn clSVMFree(context: cl_context, svm_pointer: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn clCreateSamplerWithProperties(
        context: cl_context,
        sampler_properties: *const cl_sampler_properties,
        errcode_ret: *mut cl_int,
    ) -> cl_sampler;
}
unsafe extern "C" {
    pub fn clRetainSampler(sampler: cl_sampler) -> cl_int;
}
unsafe extern "C" {
    pub fn clReleaseSampler(sampler: cl_sampler) -> cl_int;
}
unsafe extern "C" {
    pub fn clGetSamplerInfo(
        sampler: cl_sampler,
        param_name: cl_sampler_info,
        param_value_size: usize,
        param_value: *mut ::std::os::raw::c_void,
        param_value_size_ret: *mut usize,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clCreateProgramWithSource(
        context: cl_context,
        count: cl_uint,
        strings: *mut *const ::std::os::raw::c_char,
        lengths: *const usize,
        errcode_ret: *mut cl_int,
    ) -> cl_program;
}
unsafe extern "C" {
    pub fn clCreateProgramWithBinary(
        context: cl_context,
        num_devices: cl_uint,
        device_list: *const cl_device_id,
        lengths: *const usize,
        binaries: *mut *const ::std::os::raw::c_uchar,
        binary_status: *mut cl_int,
        errcode_ret: *mut cl_int,
    ) -> cl_program;
}
unsafe extern "C" {
    pub fn clCreateProgramWithBuiltInKernels(
        context: cl_context,
        num_devices: cl_uint,
        device_list: *const cl_device_id,
        kernel_names: *const ::std::os::raw::c_char,
        errcode_ret: *mut cl_int,
    ) -> cl_program;
}
unsafe extern "C" {
    pub fn clCreateProgramWithIL(
        context: cl_context,
        il: *const ::std::os::raw::c_void,
        length: usize,
        errcode_ret: *mut cl_int,
    ) -> cl_program;
}
unsafe extern "C" {
    pub fn clRetainProgram(program: cl_program) -> cl_int;
}
unsafe extern "C" {
    pub fn clReleaseProgram(program: cl_program) -> cl_int;
}
unsafe extern "C" {
    pub fn clBuildProgram(
        program: cl_program,
        num_devices: cl_uint,
        device_list: *const cl_device_id,
        options: *const ::std::os::raw::c_char,
        pfn_notify: ::std::option::Option<
            unsafe unsafe extern "C" fn(program: cl_program, user_data: *mut ::std::os::raw::c_void),
        >,
        user_data: *mut ::std::os::raw::c_void,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clCompileProgram(
        program: cl_program,
        num_devices: cl_uint,
        device_list: *const cl_device_id,
        options: *const ::std::os::raw::c_char,
        num_input_headers: cl_uint,
        input_headers: *const cl_program,
        header_include_names: *mut *const ::std::os::raw::c_char,
        pfn_notify: ::std::option::Option<
            unsafe unsafe extern "C" fn(program: cl_program, user_data: *mut ::std::os::raw::c_void),
        >,
        user_data: *mut ::std::os::raw::c_void,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clLinkProgram(
        context: cl_context,
        num_devices: cl_uint,
        device_list: *const cl_device_id,
        options: *const ::std::os::raw::c_char,
        num_input_programs: cl_uint,
        input_programs: *const cl_program,
        pfn_notify: ::std::option::Option<
            unsafe unsafe extern "C" fn(program: cl_program, user_data: *mut ::std::os::raw::c_void),
        >,
        user_data: *mut ::std::os::raw::c_void,
        errcode_ret: *mut cl_int,
    ) -> cl_program;
}
unsafe extern "C" {
    pub fn clSetProgramReleaseCallback(
        program: cl_program,
        pfn_notify: ::std::option::Option<
            unsafe unsafe extern "C" fn(program: cl_program, user_data: *mut ::std::os::raw::c_void),
        >,
        user_data: *mut ::std::os::raw::c_void,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clSetProgramSpecializationConstant(
        program: cl_program,
        spec_id: cl_uint,
        spec_size: usize,
        spec_value: *const ::std::os::raw::c_void,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clUnloadPlatformCompiler(platform: cl_platform_id) -> cl_int;
}
unsafe extern "C" {
    pub fn clGetProgramInfo(
        program: cl_program,
        param_name: cl_program_info,
        param_value_size: usize,
        param_value: *mut ::std::os::raw::c_void,
        param_value_size_ret: *mut usize,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clGetProgramBuildInfo(
        program: cl_program,
        device: cl_device_id,
        param_name: cl_program_build_info,
        param_value_size: usize,
        param_value: *mut ::std::os::raw::c_void,
        param_value_size_ret: *mut usize,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clCreateKernel(
        program: cl_program,
        kernel_name: *const ::std::os::raw::c_char,
        errcode_ret: *mut cl_int,
    ) -> cl_kernel;
}
unsafe extern "C" {
    pub fn clCreateKernelsInProgram(
        program: cl_program,
        num_kernels: cl_uint,
        kernels: *mut cl_kernel,
        num_kernels_ret: *mut cl_uint,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clCloneKernel(source_kernel: cl_kernel, errcode_ret: *mut cl_int) -> cl_kernel;
}
unsafe extern "C" {
    pub fn clRetainKernel(kernel: cl_kernel) -> cl_int;
}
unsafe extern "C" {
    pub fn clReleaseKernel(kernel: cl_kernel) -> cl_int;
}
unsafe extern "C" {
    pub fn clSetKernelArg(
        kernel: cl_kernel,
        arg_index: cl_uint,
        arg_size: usize,
        arg_value: *const ::std::os::raw::c_void,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clSetKernelArgSVMPointer(
        kernel: cl_kernel,
        arg_index: cl_uint,
        arg_value: *const ::std::os::raw::c_void,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clSetKernelExecInfo(
        kernel: cl_kernel,
        param_name: cl_kernel_exec_info,
        param_value_size: usize,
        param_value: *const ::std::os::raw::c_void,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clGetKernelInfo(
        kernel: cl_kernel,
        param_name: cl_kernel_info,
        param_value_size: usize,
        param_value: *mut ::std::os::raw::c_void,
        param_value_size_ret: *mut usize,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clGetKernelArgInfo(
        kernel: cl_kernel,
        arg_indx: cl_uint,
        param_name: cl_kernel_arg_info,
        param_value_size: usize,
        param_value: *mut ::std::os::raw::c_void,
        param_value_size_ret: *mut usize,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clGetKernelWorkGroupInfo(
        kernel: cl_kernel,
        device: cl_device_id,
        param_name: cl_kernel_work_group_info,
        param_value_size: usize,
        param_value: *mut ::std::os::raw::c_void,
        param_value_size_ret: *mut usize,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clGetKernelSubGroupInfo(
        kernel: cl_kernel,
        device: cl_device_id,
        param_name: cl_kernel_sub_group_info,
        input_value_size: usize,
        input_value: *const ::std::os::raw::c_void,
        param_value_size: usize,
        param_value: *mut ::std::os::raw::c_void,
        param_value_size_ret: *mut usize,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clWaitForEvents(num_events: cl_uint, event_list: *const cl_event) -> cl_int;
}
unsafe extern "C" {
    pub fn clGetEventInfo(
        event: cl_event,
        param_name: cl_event_info,
        param_value_size: usize,
        param_value: *mut ::std::os::raw::c_void,
        param_value_size_ret: *mut usize,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clCreateUserEvent(context: cl_context, errcode_ret: *mut cl_int) -> cl_event;
}
unsafe extern "C" {
    pub fn clRetainEvent(event: cl_event) -> cl_int;
}
unsafe extern "C" {
    pub fn clReleaseEvent(event: cl_event) -> cl_int;
}
unsafe extern "C" {
    pub fn clSetUserEventStatus(event: cl_event, execution_status: cl_int) -> cl_int;
}
unsafe extern "C" {
    pub fn clSetEventCallback(
        event: cl_event,
        command_exec_callback_type: cl_int,
        pfn_notify: ::std::option::Option<
            unsafe unsafe extern "C" fn(
                event: cl_event,
                event_command_status: cl_int,
                user_data: *mut ::std::os::raw::c_void,
            ),
        >,
        user_data: *mut ::std::os::raw::c_void,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clGetEventProfilingInfo(
        event: cl_event,
        param_name: cl_profiling_info,
        param_value_size: usize,
        param_value: *mut ::std::os::raw::c_void,
        param_value_size_ret: *mut usize,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clFlush(command_queue: cl_command_queue) -> cl_int;
}
unsafe extern "C" {
    pub fn clFinish(command_queue: cl_command_queue) -> cl_int;
}
unsafe extern "C" {
    pub fn clEnqueueReadBuffer(
        command_queue: cl_command_queue,
        buffer: cl_mem,
        blocking_read: cl_bool,
        offset: usize,
        size: usize,
        ptr: *mut ::std::os::raw::c_void,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clEnqueueReadBufferRect(
        command_queue: cl_command_queue,
        buffer: cl_mem,
        blocking_read: cl_bool,
        buffer_origin: *const usize,
        host_origin: *const usize,
        region: *const usize,
        buffer_row_pitch: usize,
        buffer_slice_pitch: usize,
        host_row_pitch: usize,
        host_slice_pitch: usize,
        ptr: *mut ::std::os::raw::c_void,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clEnqueueWriteBuffer(
        command_queue: cl_command_queue,
        buffer: cl_mem,
        blocking_write: cl_bool,
        offset: usize,
        size: usize,
        ptr: *const ::std::os::raw::c_void,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clEnqueueWriteBufferRect(
        command_queue: cl_command_queue,
        buffer: cl_mem,
        blocking_write: cl_bool,
        buffer_origin: *const usize,
        host_origin: *const usize,
        region: *const usize,
        buffer_row_pitch: usize,
        buffer_slice_pitch: usize,
        host_row_pitch: usize,
        host_slice_pitch: usize,
        ptr: *const ::std::os::raw::c_void,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clEnqueueFillBuffer(
        command_queue: cl_command_queue,
        buffer: cl_mem,
        pattern: *const ::std::os::raw::c_void,
        pattern_size: usize,
        offset: usize,
        size: usize,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clEnqueueCopyBuffer(
        command_queue: cl_command_queue,
        src_buffer: cl_mem,
        dst_buffer: cl_mem,
        src_offset: usize,
        dst_offset: usize,
        size: usize,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clEnqueueCopyBufferRect(
        command_queue: cl_command_queue,
        src_buffer: cl_mem,
        dst_buffer: cl_mem,
        src_origin: *const usize,
        dst_origin: *const usize,
        region: *const usize,
        src_row_pitch: usize,
        src_slice_pitch: usize,
        dst_row_pitch: usize,
        dst_slice_pitch: usize,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clEnqueueReadImage(
        command_queue: cl_command_queue,
        image: cl_mem,
        blocking_read: cl_bool,
        origin: *const usize,
        region: *const usize,
        row_pitch: usize,
        slice_pitch: usize,
        ptr: *mut ::std::os::raw::c_void,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clEnqueueWriteImage(
        command_queue: cl_command_queue,
        image: cl_mem,
        blocking_write: cl_bool,
        origin: *const usize,
        region: *const usize,
        input_row_pitch: usize,
        input_slice_pitch: usize,
        ptr: *const ::std::os::raw::c_void,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clEnqueueFillImage(
        command_queue: cl_command_queue,
        image: cl_mem,
        fill_color: *const ::std::os::raw::c_void,
        origin: *const usize,
        region: *const usize,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clEnqueueCopyImage(
        command_queue: cl_command_queue,
        src_image: cl_mem,
        dst_image: cl_mem,
        src_origin: *const usize,
        dst_origin: *const usize,
        region: *const usize,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clEnqueueCopyImageToBuffer(
        command_queue: cl_command_queue,
        src_image: cl_mem,
        dst_buffer: cl_mem,
        src_origin: *const usize,
        region: *const usize,
        dst_offset: usize,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clEnqueueCopyBufferToImage(
        command_queue: cl_command_queue,
        src_buffer: cl_mem,
        dst_image: cl_mem,
        src_offset: usize,
        dst_origin: *const usize,
        region: *const usize,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clEnqueueMapBuffer(
        command_queue: cl_command_queue,
        buffer: cl_mem,
        blocking_map: cl_bool,
        map_flags: cl_map_flags,
        offset: usize,
        size: usize,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
        errcode_ret: *mut cl_int,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn clEnqueueMapImage(
        command_queue: cl_command_queue,
        image: cl_mem,
        blocking_map: cl_bool,
        map_flags: cl_map_flags,
        origin: *const usize,
        region: *const usize,
        image_row_pitch: *mut usize,
        image_slice_pitch: *mut usize,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
        errcode_ret: *mut cl_int,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn clEnqueueUnmapMemObject(
        command_queue: cl_command_queue,
        memobj: cl_mem,
        mapped_ptr: *mut ::std::os::raw::c_void,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clEnqueueMigrateMemObjects(
        command_queue: cl_command_queue,
        num_mem_objects: cl_uint,
        mem_objects: *const cl_mem,
        flags: cl_mem_migration_flags,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clEnqueueNDRangeKernel(
        command_queue: cl_command_queue,
        kernel: cl_kernel,
        work_dim: cl_uint,
        global_work_offset: *const usize,
        global_work_size: *const usize,
        local_work_size: *const usize,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clEnqueueNativeKernel(
        command_queue: cl_command_queue,
        user_func: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        args: *mut ::std::os::raw::c_void,
        cb_args: usize,
        num_mem_objects: cl_uint,
        mem_list: *const cl_mem,
        args_mem_loc: *mut *const ::std::os::raw::c_void,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clEnqueueMarkerWithWaitList(
        command_queue: cl_command_queue,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clEnqueueBarrierWithWaitList(
        command_queue: cl_command_queue,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clEnqueueSVMFree(
        command_queue: cl_command_queue,
        num_svm_pointers: cl_uint,
        svm_pointers: *mut *mut ::std::os::raw::c_void,
        pfn_free_func: ::std::option::Option<
            unsafe extern "C" fn(
                queue: cl_command_queue,
                num_svm_pointers: cl_uint,
                svm_pointers: *mut *mut ::std::os::raw::c_void,
                user_data: *mut ::std::os::raw::c_void,
            ),
        >,
        user_data: *mut ::std::os::raw::c_void,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clEnqueueSVMMemcpy(
        command_queue: cl_command_queue,
        blocking_copy: cl_bool,
        dst_ptr: *mut ::std::os::raw::c_void,
        src_ptr: *const ::std::os::raw::c_void,
        size: usize,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clEnqueueSVMMemFill(
        command_queue: cl_command_queue,
        svm_ptr: *mut ::std::os::raw::c_void,
        pattern: *const ::std::os::raw::c_void,
        pattern_size: usize,
        size: usize,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clEnqueueSVMMap(
        command_queue: cl_command_queue,
        blocking_map: cl_bool,
        flags: cl_map_flags,
        svm_ptr: *mut ::std::os::raw::c_void,
        size: usize,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clEnqueueSVMUnmap(
        command_queue: cl_command_queue,
        svm_ptr: *mut ::std::os::raw::c_void,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clEnqueueSVMMigrateMem(
        command_queue: cl_command_queue,
        num_svm_pointers: cl_uint,
        svm_pointers: *mut *const ::std::os::raw::c_void,
        sizes: *const usize,
        flags: cl_mem_migration_flags,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clGetExtensionFunctionAddressForPlatform(
        platform: cl_platform_id,
        func_name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn clCreateImage2D(
        context: cl_context,
        flags: cl_mem_flags,
        image_format: *const cl_image_format,
        image_width: usize,
        image_height: usize,
        image_row_pitch: usize,
        host_ptr: *mut ::std::os::raw::c_void,
        errcode_ret: *mut cl_int,
    ) -> cl_mem;
}
unsafe extern "C" {
    pub fn clCreateImage3D(
        context: cl_context,
        flags: cl_mem_flags,
        image_format: *const cl_image_format,
        image_width: usize,
        image_height: usize,
        image_depth: usize,
        image_row_pitch: usize,
        image_slice_pitch: usize,
        host_ptr: *mut ::std::os::raw::c_void,
        errcode_ret: *mut cl_int,
    ) -> cl_mem;
}
unsafe extern "C" {
    pub fn clEnqueueMarker(command_queue: cl_command_queue, event: *mut cl_event) -> cl_int;
}
unsafe extern "C" {
    pub fn clEnqueueWaitForEvents(
        command_queue: cl_command_queue,
        num_events: cl_uint,
        event_list: *const cl_event,
    ) -> cl_int;
}
unsafe extern "C" {
    pub fn clEnqueueBarrier(command_queue: cl_command_queue) -> cl_int;
}
unsafe extern "C" {
    pub fn clUnloadCompiler() -> cl_int;
}
unsafe extern "C" {
    pub fn clGetExtensionFunctionAddress(
        func_name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn clCreateCommandQueue(
        context: cl_context,
        device: cl_device_id,
        properties: cl_command_queue_properties,
        errcode_ret: *mut cl_int,
    ) -> cl_command_queue;
}
unsafe extern "C" {
    pub fn clCreateSampler(
        context: cl_context,
        normalized_coords: cl_bool,
        addressing_mode: cl_addressing_mode,
        filter_mode: cl_filter_mode,
        errcode_ret: *mut cl_int,
    ) -> cl_sampler;
}
unsafe extern "C" {
    pub fn clEnqueueTask(
        command_queue: cl_command_queue,
        kernel: cl_kernel,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
